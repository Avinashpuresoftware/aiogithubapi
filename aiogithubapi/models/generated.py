# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json
#   timestamp: 2022-03-06T12:28:18+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Extra, Field, conint, constr


class NullableSimpleUser(BaseModel):
    """
    Simple User
    """

    name: Optional[str] = None
    email: Optional[str] = None
    login: str = Field(..., example='octocat')
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDQ6VXNlcjE=')
    avatar_url: AnyUrl = Field(..., example='https://github.com/images/error/octocat_happy.gif')
    gravatar_id: str = Field(..., example='41d064eb2195891e12d0413f63227ea7')
    url: AnyUrl = Field(..., example='https://api.github.com/users/octocat')
    html_url: AnyUrl = Field(..., example='https://github.com/octocat')
    followers_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/followers')
    following_url: str = Field(
        ..., example='https://api.github.com/users/octocat/following{/other_user}'
    )
    gists_url: str = Field(..., example='https://api.github.com/users/octocat/gists{/gist_id}')
    starred_url: str = Field(
        ..., example='https://api.github.com/users/octocat/starred{/owner}{/repo}'
    )
    subscriptions_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/subscriptions'
    )
    organizations_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/orgs')
    repos_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/repos')
    events_url: str = Field(..., example='https://api.github.com/users/octocat/events{/privacy}')
    received_events_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/received_events'
    )
    type: str = Field(..., example='User')
    site_admin: bool
    starred_at: Optional[str] = Field(None, example='"2020-07-09T00:17:55Z"')


class Permissions(BaseModel):
    """
    The set of permissions for the GitHub app
    """

    class Config:
        extra = Extra.allow

    issues: Optional[str] = None
    checks: Optional[str] = None
    metadata: Optional[str] = None
    contents: Optional[str] = None
    deployments: Optional[str] = None


class Integration(BaseModel):
    """
    GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    """

    id: int = Field(..., description='Unique identifier of the GitHub app', example=37)
    slug: Optional[str] = Field(
        None, description='The slug name of the GitHub app', example='probot-owners'
    )
    node_id: str = Field(..., example='MDExOkludGVncmF0aW9uMQ==')
    owner: NullableSimpleUser
    name: str = Field(..., description='The name of the GitHub app', example='Probot Owners')
    description: str = Field(..., example='The description of the app.')
    external_url: AnyUrl = Field(..., example='https://example.com')
    html_url: AnyUrl = Field(..., example='https://github.com/apps/super-ci')
    created_at: datetime = Field(..., example='2017-07-08T16:18:44-04:00')
    updated_at: datetime = Field(..., example='2017-07-08T16:18:44-04:00')
    permissions: Permissions = Field(
        ...,
        description='The set of permissions for the GitHub app',
        example={'issues': 'read', 'deployments': 'write'},
    )
    events: List[str] = Field(
        ..., description='The list of events for the GitHub app', example=['label', 'deployment']
    )
    installations_count: Optional[int] = Field(
        None, description='The number of installations associated with the GitHub app', example=5
    )
    client_id: Optional[str] = Field(None, example='"Iv1.25b5d1e65ffc4022"')
    client_secret: Optional[str] = Field(None, example='"1d4b2097ac622ba702d19de498f005747a8b21d3"')
    webhook_secret: Optional[str] = Field(
        None, example='"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"'
    )
    pem: Optional[str] = Field(
        None,
        example='"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    )


class BasicError(BaseModel):
    """
    Basic Error
    """

    message: Optional[str] = None
    documentation_url: Optional[str] = None
    url: Optional[str] = None
    status: Optional[str] = None


class ValidationErrorSimple(BaseModel):
    """
    Validation Error Simple
    """

    message: str
    documentation_url: str
    errors: Optional[List[str]] = None


class WebhookConfigUrl(BaseModel):
    __root__: AnyUrl = Field(
        ...,
        description='The URL to which the payloads will be delivered.',
        example='https://example.com/webhook',
    )


class WebhookConfigContentType(BaseModel):
    __root__: str = Field(
        ...,
        description='The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.',
        example='"json"',
    )


class WebhookConfigSecret(BaseModel):
    __root__: str = Field(
        ...,
        description='If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).',
        example='"********"',
    )


class WebhookConfigInsecureSsl(BaseModel):
    __root__: Union[str, float]


class WebhookConfig(BaseModel):
    """
    Configuration object of the webhook
    """

    url: Optional[WebhookConfigUrl] = None
    content_type: Optional[WebhookConfigContentType] = None
    secret: Optional[WebhookConfigSecret] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None


class HookDeliveryItem(BaseModel):
    """
    Delivery made by a webhook, without request and response information.
    """

    id: int = Field(..., description='Unique identifier of the webhook delivery.', example=42)
    guid: str = Field(
        ...,
        description='Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).',
        example='58474f00-b361-11eb-836d-0e4f3503ccbe',
    )
    delivered_at: datetime = Field(
        ..., description='Time when the webhook delivery occurred.', example='2021-05-12T20:33:44Z'
    )
    redelivery: bool = Field(
        ..., description='Whether the webhook delivery is a redelivery.', example=False
    )
    duration: float = Field(..., description='Time spent delivering.', example=0.03)
    status: str = Field(
        ...,
        description='Describes the response returned after attempting the delivery.',
        example='failed to connect',
    )
    status_code: int = Field(
        ..., description='Status code received when delivery was made.', example=502
    )
    event: str = Field(..., description='The event that triggered the delivery.', example='issues')
    action: str = Field(
        ...,
        description='The type of activity for the event that triggered the delivery.',
        example='opened',
    )
    installation_id: int = Field(
        ...,
        description='The id of the GitHub App installation associated with this event.',
        example=123,
    )
    repository_id: int = Field(
        ..., description='The id of the repository associated with this event.', example=123
    )


class ScimError(BaseModel):
    """
    Scim Error
    """

    message: Optional[str] = None
    documentation_url: Optional[str] = None
    detail: Optional[str] = None
    status: Optional[int] = None
    scim_type: Optional[str] = Field(None, alias='scimType')
    schemas: Optional[List[str]] = None


class Error(BaseModel):
    resource: Optional[str] = None
    field: Optional[str] = None
    message: Optional[str] = None
    code: str
    index: Optional[int] = None
    value: Optional[Union[str, int, List[str]]] = None


class ValidationError(BaseModel):
    """
    Validation Error
    """

    message: str
    documentation_url: str
    errors: Optional[List[Error]] = None


class Request(BaseModel):
    headers: Dict[str, Any] = Field(
        ..., description='The request headers sent with the webhook delivery.'
    )
    payload: Dict[str, Any] = Field(..., description='The webhook payload.')


class Response(BaseModel):
    headers: Dict[str, Any] = Field(
        ..., description='The response headers received when the delivery was made.'
    )
    payload: str = Field(..., description='The response payload received.')


class HookDelivery(BaseModel):
    """
    Delivery made by a webhook.
    """

    id: int = Field(..., description='Unique identifier of the delivery.', example=42)
    guid: str = Field(
        ...,
        description='Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).',
        example='58474f00-b361-11eb-836d-0e4f3503ccbe',
    )
    delivered_at: datetime = Field(
        ..., description='Time when the delivery was delivered.', example='2021-05-12T20:33:44Z'
    )
    redelivery: bool = Field(
        ..., description='Whether the delivery is a redelivery.', example=False
    )
    duration: float = Field(..., description='Time spent delivering.', example=0.03)
    status: str = Field(
        ...,
        description='Description of the status of the attempted delivery',
        example='failed to connect',
    )
    status_code: int = Field(
        ..., description='Status code received when delivery was made.', example=502
    )
    event: str = Field(..., description='The event that triggered the delivery.', example='issues')
    action: str = Field(
        ...,
        description='The type of activity for the event that triggered the delivery.',
        example='opened',
    )
    installation_id: int = Field(
        ...,
        description='The id of the GitHub App installation associated with this event.',
        example=123,
    )
    repository_id: int = Field(
        ..., description='The id of the repository associated with this event.', example=123
    )
    url: Optional[str] = Field(
        None, description='The URL target of the delivery.', example='https://www.example.com'
    )
    request: Request
    response: Response


class SimpleUser(NullableSimpleUser):
    """
    Simple User
    """

    pass


class Enterprise(BaseModel):
    """
    An enterprise account
    """

    description: Optional[str] = Field(None, description='A short description of the enterprise.')
    html_url: AnyUrl = Field(..., example='https://github.com/enterprises/octo-business')
    website_url: Optional[AnyUrl] = Field(None, description="The enterprise's website URL.")
    id: int = Field(..., description='Unique identifier of the enterprise', example=42)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., description='The name of the enterprise.', example='Octo Business')
    slug: str = Field(
        ..., description='The slug url identifier for the enterprise.', example='octo-business'
    )
    created_at: datetime = Field(..., example='2019-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2019-01-26T19:14:43Z')
    avatar_url: AnyUrl


class Actions(Enum):
    """
    The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
    """

    read = 'read'
    write = 'write'


class RepositoryProjects(Enum):
    """
    The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
    """

    read = 'read'
    write = 'write'
    admin = 'admin'


class Workflows(Enum):
    """
    The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
    """

    write = 'write'


class OrganizationPlan(Enum):
    """
    The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
    """

    read = 'read'


class AppPermissions(BaseModel):
    """
    The permissions granted to the user-to-server access token.
    """

    actions: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.',
    )
    administration: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.',
    )
    checks: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.',
    )
    contents: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.',
    )
    deployments: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.',
    )
    environments: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.',
    )
    issues: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.',
    )
    metadata: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.',
    )
    packages: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.',
    )
    pages: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.',
    )
    pull_requests: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.',
    )
    repository_hooks: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.',
    )
    repository_projects: Optional[RepositoryProjects] = Field(
        None,
        description='The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.',
    )
    secret_scanning_alerts: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.',
    )
    secrets: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.',
    )
    security_events: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.',
    )
    single_file: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.',
    )
    statuses: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.',
    )
    vulnerability_alerts: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.',
    )
    workflows: Optional[Workflows] = Field(
        None,
        description='The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.',
    )
    members: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.',
    )
    organization_administration: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.',
    )
    organization_hooks: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.',
    )
    organization_plan: Optional[OrganizationPlan] = Field(
        None,
        description="The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
    )
    organization_projects: Optional[RepositoryProjects] = Field(
        None,
        description='The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.',
    )
    organization_packages: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.',
    )
    organization_secrets: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.',
    )
    organization_self_hosted_runners: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.',
    )
    organization_user_blocking: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.',
    )
    team_discussions: Optional[Actions] = Field(
        None,
        description='The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.',
    )


class RepositorySelection(Enum):
    """
    Describe whether all repositories have been selected or there's a selection involved
    """

    all = 'all'
    selected = 'selected'


class Installation(BaseModel):
    """
    Installation
    """

    id: int = Field(..., description='The ID of the installation.', example=1)
    account: Union[SimpleUser, Enterprise]
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    access_tokens_url: AnyUrl = Field(
        ..., example='https://api.github.com/installations/1/access_tokens'
    )
    repositories_url: AnyUrl = Field(
        ..., example='https://api.github.com/installation/repositories'
    )
    html_url: AnyUrl = Field(
        ..., example='https://github.com/organizations/github/settings/installations/1'
    )
    app_id: int = Field(..., example=1)
    target_id: int = Field(
        ..., description='The ID of the user or organization this token is being scoped to.'
    )
    target_type: str = Field(..., example='Organization')
    permissions: AppPermissions
    events: List[str]
    created_at: datetime
    updated_at: datetime
    single_file_name: str = Field(..., example='config.yaml')
    has_multiple_single_files: Optional[bool] = Field(None, example=True)
    single_file_paths: Optional[List[str]] = Field(
        None, example=['config.yml', '.github/issue_TEMPLATE.md']
    )
    app_slug: str = Field(..., example='github-actions')
    suspended_by: NullableSimpleUser
    suspended_at: datetime
    contact_email: Optional[str] = Field(
        None, example='"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"'
    )


class NullableLicenseSimple(BaseModel):
    """
    License Simple
    """

    key: str = Field(..., example='mit')
    name: str = Field(..., example='MIT License')
    url: AnyUrl = Field(..., example='https://api.github.com/licenses/mit')
    spdx_id: str = Field(..., example='MIT')
    node_id: str = Field(..., example='MDc6TGljZW5zZW1pdA==')
    html_url: Optional[AnyUrl] = None


class Permissions1(BaseModel):
    admin: bool
    pull: bool
    triage: Optional[bool] = None
    push: bool
    maintain: Optional[bool] = None


class Owner(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    avatar_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    organizations_url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    received_events_url: Optional[str] = None
    type: Optional[str] = None
    site_admin: Optional[bool] = None


class Permissions2(BaseModel):
    admin: Optional[bool] = None
    maintain: Optional[bool] = None
    push: Optional[bool] = None
    triage: Optional[bool] = None
    pull: Optional[bool] = None


class TemplateRepository(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    name: Optional[str] = None
    full_name: Optional[str] = None
    owner: Optional[Owner] = None
    private: Optional[bool] = None
    html_url: Optional[str] = None
    description: Optional[str] = None
    fork: Optional[bool] = None
    url: Optional[str] = None
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    forks_url: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_url: Optional[str] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    notifications_url: Optional[str] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    ssh_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: Optional[str] = None
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = None
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    permissions: Optional[Permissions2] = None
    allow_rebase_merge: Optional[bool] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = None
    allow_auto_merge: Optional[bool] = None
    delete_branch_on_merge: Optional[bool] = None
    allow_update_branch: Optional[bool] = None
    allow_merge_commit: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None


class Repository(BaseModel):
    """
    A git repository
    """

    id: int = Field(..., description='Unique identifier of the repository', example=42)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., description='The name of the repository.', example='Team Environment')
    full_name: str = Field(..., example='octocat/Hello-World')
    license: NullableLicenseSimple
    organization: Optional[NullableSimpleUser] = None
    forks: int
    permissions: Optional[Permissions1] = None
    owner: SimpleUser
    private: Optional[bool] = Field(
        False, description='Whether the repository is private or public.'
    )
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World')
    description: str = Field(..., example='This your first repo!')
    fork: bool
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World')
    archive_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
    )
    assignees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/assignees{/user}'
    )
    blobs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'
    )
    branches_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/branches{/branch}'
    )
    collaborators_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
    )
    comments_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/comments{/number}'
    )
    commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/commits{/sha}'
    )
    compare_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
    )
    contents_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contents/{+path}'
    )
    contributors_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contributors'
    )
    deployments_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/deployments'
    )
    downloads_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/downloads'
    )
    events_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/events'
    )
    forks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/forks')
    git_commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'
    )
    git_refs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}'
    )
    git_tags_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}'
    )
    git_url: str = Field(..., example='git:github.com/octocat/Hello-World.git')
    issue_comment_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
    )
    issue_events_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
    )
    issues_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues{/number}'
    )
    keys_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/keys{/key_id}'
    )
    labels_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/labels{/name}'
    )
    languages_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/languages'
    )
    merges_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/merges'
    )
    milestones_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
    )
    notifications_url: str = Field(
        ...,
        example='http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    )
    pulls_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/pulls{/number}'
    )
    releases_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/releases{/id}'
    )
    ssh_url: str = Field(..., example='git@github.com:octocat/Hello-World.git')
    stargazers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/stargazers'
    )
    statuses_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/statuses/{sha}'
    )
    subscribers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscribers'
    )
    subscription_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscription'
    )
    tags_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/tags')
    teams_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/teams')
    trees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'
    )
    clone_url: str = Field(..., example='https://github.com/octocat/Hello-World.git')
    mirror_url: AnyUrl = Field(..., example='git:git.example.com/octocat/Hello-World')
    hooks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/hooks')
    svn_url: AnyUrl = Field(..., example='https://svn.github.com/octocat/Hello-World')
    homepage: AnyUrl = Field(..., example='https://github.com')
    language: str
    forks_count: int = Field(..., example=9)
    stargazers_count: int = Field(..., example=80)
    watchers_count: int = Field(..., example=80)
    size: int = Field(..., example=108)
    default_branch: str = Field(
        ..., description='The default branch of the repository.', example='master'
    )
    open_issues_count: int = Field(..., example=0)
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        example=True,
    )
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = Field(
        True, description='Whether issues are enabled.', example=True
    )
    has_projects: Optional[bool] = Field(
        True, description='Whether projects are enabled.', example=True
    )
    has_wiki: Optional[bool] = Field(True, description='Whether the wiki is enabled.', example=True)
    has_pages: bool
    has_downloads: Optional[bool] = Field(
        True, description='Whether downloads are enabled.', example=True
    )
    archived: Optional[bool] = Field(False, description='Whether the repository is archived.')
    disabled: bool = Field(..., description='Returns whether or not this repository disabled.')
    visibility: Optional[str] = Field(
        'public', description='The repository visibility: public, private, or internal.'
    )
    pushed_at: datetime = Field(..., example='2011-01-26T19:06:43Z')
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:14:43Z')
    allow_rebase_merge: Optional[bool] = Field(
        True, description='Whether to allow rebase merges for pull requests.', example=True
    )
    template_repository: Optional[TemplateRepository] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(
        True, description='Whether to allow squash merges for pull requests.', example=True
    )
    allow_auto_merge: Optional[bool] = Field(
        False, description='Whether to allow Auto-merge to be used on pull requests.', example=False
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        example=False,
    )
    allow_merge_commit: Optional[bool] = Field(
        True, description='Whether to allow merge commits for pull requests.', example=True
    )
    allow_forking: Optional[bool] = Field(None, description='Whether to allow forking this repo')
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    open_issues: int
    watchers: int
    master_branch: Optional[str] = None
    starred_at: Optional[str] = Field(None, example='"2020-07-09T00:17:42Z"')


class InstallationToken(BaseModel):
    """
    Authentication token for a GitHub App installed on a user or org.
    """

    token: str
    expires_at: str
    permissions: Optional[AppPermissions] = None
    repository_selection: Optional[RepositorySelection] = None
    repositories: Optional[List[Repository]] = None
    single_file: Optional[str] = Field(None, example='README.md')
    has_multiple_single_files: Optional[bool] = Field(None, example=True)
    single_file_paths: Optional[List[str]] = Field(
        None, example=['config.yml', '.github/issue_TEMPLATE.md']
    )


class App(BaseModel):
    client_id: str
    name: str
    url: AnyUrl


class ApplicationGrant(BaseModel):
    """
    The authorization associated with an OAuth Access.
    """

    id: int = Field(..., example=1)
    url: AnyUrl = Field(..., example='https://api.github.com/applications/grants/1')
    app: App
    created_at: datetime = Field(..., example='2011-09-06T17:26:27Z')
    updated_at: datetime = Field(..., example='2011-09-06T20:39:23Z')
    scopes: List[str] = Field(..., example=['public_repo'])
    user: Optional[NullableSimpleUser] = None


class NullableScopedInstallation(BaseModel):
    permissions: AppPermissions
    repository_selection: RepositorySelection = Field(
        ...,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )
    single_file_name: str = Field(..., example='config.yaml')
    has_multiple_single_files: Optional[bool] = Field(None, example=True)
    single_file_paths: Optional[List[str]] = Field(
        None, example=['config.yml', '.github/issue_TEMPLATE.md']
    )
    repositories_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/repos')
    account: SimpleUser


class App1(App):
    pass


class Authorization(BaseModel):
    """
    The authorization for an OAuth app, GitHub App, or a Personal Access Token.
    """

    id: int
    url: AnyUrl
    scopes: List[str] = Field(..., description='A list of scopes that this authorization is in.')
    token: str
    token_last_eight: str
    hashed_token: str
    app: App1
    note: str
    note_url: AnyUrl
    updated_at: datetime
    created_at: datetime
    fingerprint: str
    user: Optional[NullableSimpleUser] = None
    installation: Optional[NullableScopedInstallation] = None
    expires_at: datetime


class CodeOfConduct(BaseModel):
    """
    Code Of Conduct
    """

    key: str = Field(..., example='contributor_covenant')
    name: str = Field(..., example='Contributor Covenant')
    url: AnyUrl = Field(..., example='https://api.github.com/codes_of_conduct/contributor_covenant')
    body: Optional[str] = Field(
        None,
        example="# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
    )
    html_url: AnyUrl


class EnabledOrganizations(Enum):
    """
    The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
    """

    all = 'all'
    none = 'none'
    selected = 'selected'


class AllowedActions(Enum):
    """
    The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
    """

    all = 'all'
    local_only = 'local_only'
    selected = 'selected'


class SelectedActionsUrl(BaseModel):
    __root__: str = Field(
        ...,
        description='The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.',
    )


class ActionsEnterprisePermissions(BaseModel):
    enabled_organizations: EnabledOrganizations
    selected_organizations_url: Optional[str] = Field(
        None,
        description='The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.',
    )
    allowed_actions: Optional[AllowedActions] = None
    selected_actions_url: Optional[SelectedActionsUrl] = None


class OrganizationSimple(BaseModel):
    """
    Organization Simple
    """

    login: str = Field(..., example='github')
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDEyOk9yZ2FuaXphdGlvbjE=')
    url: AnyUrl = Field(..., example='https://api.github.com/orgs/github')
    repos_url: AnyUrl = Field(..., example='https://api.github.com/orgs/github/repos')
    events_url: AnyUrl = Field(..., example='https://api.github.com/orgs/github/events')
    hooks_url: str = Field(..., example='https://api.github.com/orgs/github/hooks')
    issues_url: str = Field(..., example='https://api.github.com/orgs/github/issues')
    members_url: str = Field(..., example='https://api.github.com/orgs/github/members{/member}')
    public_members_url: str = Field(
        ..., example='https://api.github.com/orgs/github/public_members{/member}'
    )
    avatar_url: str = Field(..., example='https://github.com/images/error/octocat_happy.gif')
    description: str = Field(..., example='A great organization')


class SelectedActions(BaseModel):
    github_owned_allowed: Optional[bool] = Field(
        None,
        description='Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.',
    )
    verified_allowed: Optional[bool] = Field(
        None,
        description='Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.',
    )
    patterns_allowed: Optional[List[str]] = Field(
        None,
        description='Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."',
    )


class RunnerGroupsEnterprise(BaseModel):
    id: float
    name: str
    visibility: str
    default: bool
    selected_organizations_url: Optional[str] = None
    runners_url: str
    allows_public_repositories: bool


class Type(Enum):
    """
    The type of label. Read-only labels are applied automatically when the runner is configured.
    """

    read_only = 'read-only'
    custom = 'custom'


class RunnerLabel(BaseModel):
    """
    A label for a self hosted runner
    """

    id: Optional[int] = Field(None, description='Unique identifier of the label.')
    name: str = Field(..., description='Name of the label.')
    type: Optional[Type] = Field(
        None,
        description='The type of label. Read-only labels are applied automatically when the runner is configured.',
    )


class Runner(BaseModel):
    """
    A self hosted runner
    """

    id: int = Field(..., description='The id of the runner.', example=5)
    name: str = Field(..., description='The name of the runner.', example='iMac')
    os: str = Field(..., description='The Operating System of the runner.', example='macos')
    status: str = Field(..., description='The status of the runner.', example='online')
    busy: bool
    labels: List[RunnerLabel]


class RunnerApplication(BaseModel):
    """
    Runner Application
    """

    os: str
    architecture: str
    download_url: str
    filename: str
    temp_download_token: Optional[str] = Field(
        None, description='A short lived bearer token used to download the runner, if needed.'
    )
    sha256_checksum: Optional[str] = None


class AuthenticationToken(BaseModel):
    """
    Authentication Token
    """

    token: str = Field(
        ..., description='The token used for authentication', example='v1.1f699f1069f60xxx'
    )
    expires_at: datetime = Field(
        ..., description='The time this token expires', example='2016-07-11T22:14:10Z'
    )
    permissions: Optional[Dict[str, Any]] = Field(
        None, example={'issues': 'read', 'deployments': 'write'}
    )
    repositories: Optional[List[Repository]] = Field(
        None, description='The repositories this token has access to'
    )
    single_file: Optional[str] = Field(None, example='config.yaml')
    repository_selection: Optional[RepositorySelection] = Field(
        None,
        description="Describe whether all repositories have been selected or there's a selection involved",
    )


class ActorLocation(BaseModel):
    country_name: Optional[str] = None


class AuditLogEvent(BaseModel):
    _timestamp: Optional[int] = Field(
        None,
        alias='@timestamp',
        description='The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).',
    )
    action: Optional[str] = Field(
        None,
        description='The name of the action that was performed, for example `user.login` or `repo.create`.',
    )
    active: Optional[bool] = None
    active_was: Optional[bool] = None
    actor: Optional[str] = Field(None, description='The actor who performed the action.')
    actor_id: Optional[int] = Field(
        None, description='The id of the actor who performed the action.'
    )
    actor_location: Optional[ActorLocation] = None
    data: Optional[Dict[str, Any]] = None
    org_id: Optional[int] = None
    blocked_user: Optional[str] = Field(
        None, description='The username of the account being blocked.'
    )
    business: Optional[str] = None
    config: Optional[List[Dict[str, Any]]] = None
    config_was: Optional[List[Dict[str, Any]]] = None
    content_type: Optional[str] = None
    created_at: Optional[int] = Field(
        None,
        description='The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).',
    )
    deploy_key_fingerprint: Optional[str] = None
    _document_id: Optional[str] = Field(None, description='A unique identifier for an audit event.')
    emoji: Optional[str] = None
    events: Optional[List[Dict[str, Any]]] = None
    events_were: Optional[List[Dict[str, Any]]] = None
    explanation: Optional[str] = None
    fingerprint: Optional[str] = None
    hook_id: Optional[int] = None
    limited_availability: Optional[bool] = None
    message: Optional[str] = None
    name: Optional[str] = None
    old_user: Optional[str] = None
    openssh_public_key: Optional[str] = None
    org: Optional[str] = None
    previous_visibility: Optional[str] = None
    read_only: Optional[bool] = None
    repo: Optional[str] = Field(None, description='The name of the repository.')
    repository: Optional[str] = Field(None, description='The name of the repository.')
    repository_public: Optional[bool] = None
    target_login: Optional[str] = None
    team: Optional[str] = None
    transport_protocol: Optional[int] = Field(
        None,
        description='The type of protocol (for example, HTTP or SSH) used to transfer Git data.',
    )
    transport_protocol_name: Optional[str] = Field(
        None,
        description='A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.',
    )
    user: Optional[str] = Field(
        None, description='The user that was affected by the action performed (if available).'
    )
    visibility: Optional[str] = Field(
        None, description='The repository visibility, for example `public` or `private`.'
    )


class AlertNumber(BaseModel):
    __root__: int = Field(..., description='The security alert number.', read_only=True)


class AlertCreatedAt(BaseModel):
    __root__: datetime = Field(
        ...,
        description='The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
        read_only=True,
    )


class AlertUrl(BaseModel):
    __root__: AnyUrl = Field(
        ..., description='The REST API URL of the alert resource.', read_only=True
    )


class AlertHtmlUrl(BaseModel):
    __root__: AnyUrl = Field(
        ..., description='The GitHub URL of the alert resource.', read_only=True
    )


class SecretScanningAlertState(Enum):
    """
    Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
    """

    open = 'open'
    resolved = 'resolved'


class SecretScanningAlertResolutionEnum(Enum):
    """
    **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
    """

    false_positive = 'false_positive'
    wont_fix = 'wont_fix'
    revoked = 'revoked'
    used_in_tests = 'used_in_tests'


class SecretScanningAlertResolution(BaseModel):
    __root__: Optional[SecretScanningAlertResolutionEnum] = Field(
        None,
        description='**Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.',
    )


class Permissions3(Permissions1):
    pass


class Owner1(Owner):
    pass


class Permissions4(Permissions2):
    pass


class TemplateRepository1(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    name: Optional[str] = None
    full_name: Optional[str] = None
    owner: Optional[Owner1] = None
    private: Optional[bool] = None
    html_url: Optional[str] = None
    description: Optional[str] = None
    fork: Optional[bool] = None
    url: Optional[str] = None
    archive_url: Optional[str] = None
    assignees_url: Optional[str] = None
    blobs_url: Optional[str] = None
    branches_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    comments_url: Optional[str] = None
    commits_url: Optional[str] = None
    compare_url: Optional[str] = None
    contents_url: Optional[str] = None
    contributors_url: Optional[str] = None
    deployments_url: Optional[str] = None
    downloads_url: Optional[str] = None
    events_url: Optional[str] = None
    forks_url: Optional[str] = None
    git_commits_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_url: Optional[str] = None
    issue_comment_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    issues_url: Optional[str] = None
    keys_url: Optional[str] = None
    labels_url: Optional[str] = None
    languages_url: Optional[str] = None
    merges_url: Optional[str] = None
    milestones_url: Optional[str] = None
    notifications_url: Optional[str] = None
    pulls_url: Optional[str] = None
    releases_url: Optional[str] = None
    ssh_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    statuses_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    tags_url: Optional[str] = None
    teams_url: Optional[str] = None
    trees_url: Optional[str] = None
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: Optional[str] = None
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = None
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    permissions: Optional[Permissions4] = None
    allow_rebase_merge: Optional[bool] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = None
    allow_auto_merge: Optional[bool] = None
    delete_branch_on_merge: Optional[bool] = None
    allow_update_branch: Optional[bool] = None
    allow_merge_commit: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None


class NullableRepository(BaseModel):
    """
    A git repository
    """

    id: int = Field(..., description='Unique identifier of the repository', example=42)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., description='The name of the repository.', example='Team Environment')
    full_name: str = Field(..., example='octocat/Hello-World')
    license: NullableLicenseSimple
    organization: Optional[NullableSimpleUser] = None
    forks: int
    permissions: Optional[Permissions3] = None
    owner: SimpleUser
    private: Optional[bool] = Field(
        False, description='Whether the repository is private or public.'
    )
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World')
    description: str = Field(..., example='This your first repo!')
    fork: bool
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World')
    archive_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
    )
    assignees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/assignees{/user}'
    )
    blobs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'
    )
    branches_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/branches{/branch}'
    )
    collaborators_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
    )
    comments_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/comments{/number}'
    )
    commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/commits{/sha}'
    )
    compare_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
    )
    contents_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contents/{+path}'
    )
    contributors_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contributors'
    )
    deployments_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/deployments'
    )
    downloads_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/downloads'
    )
    events_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/events'
    )
    forks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/forks')
    git_commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'
    )
    git_refs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}'
    )
    git_tags_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}'
    )
    git_url: str = Field(..., example='git:github.com/octocat/Hello-World.git')
    issue_comment_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
    )
    issue_events_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
    )
    issues_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues{/number}'
    )
    keys_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/keys{/key_id}'
    )
    labels_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/labels{/name}'
    )
    languages_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/languages'
    )
    merges_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/merges'
    )
    milestones_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
    )
    notifications_url: str = Field(
        ...,
        example='http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    )
    pulls_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/pulls{/number}'
    )
    releases_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/releases{/id}'
    )
    ssh_url: str = Field(..., example='git@github.com:octocat/Hello-World.git')
    stargazers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/stargazers'
    )
    statuses_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/statuses/{sha}'
    )
    subscribers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscribers'
    )
    subscription_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscription'
    )
    tags_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/tags')
    teams_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/teams')
    trees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'
    )
    clone_url: str = Field(..., example='https://github.com/octocat/Hello-World.git')
    mirror_url: AnyUrl = Field(..., example='git:git.example.com/octocat/Hello-World')
    hooks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/hooks')
    svn_url: AnyUrl = Field(..., example='https://svn.github.com/octocat/Hello-World')
    homepage: AnyUrl = Field(..., example='https://github.com')
    language: str
    forks_count: int = Field(..., example=9)
    stargazers_count: int = Field(..., example=80)
    watchers_count: int = Field(..., example=80)
    size: int = Field(..., example=108)
    default_branch: str = Field(
        ..., description='The default branch of the repository.', example='master'
    )
    open_issues_count: int = Field(..., example=0)
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        example=True,
    )
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = Field(
        True, description='Whether issues are enabled.', example=True
    )
    has_projects: Optional[bool] = Field(
        True, description='Whether projects are enabled.', example=True
    )
    has_wiki: Optional[bool] = Field(True, description='Whether the wiki is enabled.', example=True)
    has_pages: bool
    has_downloads: Optional[bool] = Field(
        True, description='Whether downloads are enabled.', example=True
    )
    archived: Optional[bool] = Field(False, description='Whether the repository is archived.')
    disabled: bool = Field(..., description='Returns whether or not this repository disabled.')
    visibility: Optional[str] = Field(
        'public', description='The repository visibility: public, private, or internal.'
    )
    pushed_at: datetime = Field(..., example='2011-01-26T19:06:43Z')
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:14:43Z')
    allow_rebase_merge: Optional[bool] = Field(
        True, description='Whether to allow rebase merges for pull requests.', example=True
    )
    template_repository: Optional[TemplateRepository1] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(
        True, description='Whether to allow squash merges for pull requests.', example=True
    )
    allow_auto_merge: Optional[bool] = Field(
        False, description='Whether to allow Auto-merge to be used on pull requests.', example=False
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        example=False,
    )
    allow_merge_commit: Optional[bool] = Field(
        True, description='Whether to allow merge commits for pull requests.', example=True
    )
    allow_forking: Optional[bool] = Field(None, description='Whether to allow forking this repo')
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    open_issues: int
    watchers: int
    master_branch: Optional[str] = None
    starred_at: Optional[str] = Field(None, example='"2020-07-09T00:17:42Z"')


class Permissions5(Permissions2):
    pass


class License(BaseModel):
    key: Optional[str] = None
    name: Optional[str] = None
    spdx_id: Optional[str] = None
    url: Optional[str] = None
    node_id: Optional[str] = None


class MinimalRepository(BaseModel):
    """
    Minimal Repository
    """

    id: int = Field(..., example=1296269)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., example='Hello-World')
    full_name: str = Field(..., example='octocat/Hello-World')
    owner: SimpleUser
    private: bool
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World')
    description: str = Field(..., example='This your first repo!')
    fork: bool
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World')
    archive_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
    )
    assignees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/assignees{/user}'
    )
    blobs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'
    )
    branches_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/branches{/branch}'
    )
    collaborators_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
    )
    comments_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/comments{/number}'
    )
    commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/commits{/sha}'
    )
    compare_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
    )
    contents_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contents/{+path}'
    )
    contributors_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contributors'
    )
    deployments_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/deployments'
    )
    downloads_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/downloads'
    )
    events_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/events'
    )
    forks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/forks')
    git_commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'
    )
    git_refs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}'
    )
    git_tags_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}'
    )
    git_url: Optional[str] = None
    issue_comment_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
    )
    issue_events_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
    )
    issues_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues{/number}'
    )
    keys_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/keys{/key_id}'
    )
    labels_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/labels{/name}'
    )
    languages_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/languages'
    )
    merges_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/merges'
    )
    milestones_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
    )
    notifications_url: str = Field(
        ...,
        example='http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    )
    pulls_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/pulls{/number}'
    )
    releases_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/releases{/id}'
    )
    ssh_url: Optional[str] = None
    stargazers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/stargazers'
    )
    statuses_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/statuses/{sha}'
    )
    subscribers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscribers'
    )
    subscription_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscription'
    )
    tags_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/tags')
    teams_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/teams')
    trees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'
    )
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/hooks')
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = None
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[datetime] = Field(None, example='2011-01-26T19:06:43Z')
    created_at: Optional[datetime] = Field(None, example='2011-01-26T19:01:12Z')
    updated_at: Optional[datetime] = Field(None, example='2011-01-26T19:14:43Z')
    permissions: Optional[Permissions5] = None
    role_name: Optional[str] = Field(None, example='admin')
    template_repository: Optional[NullableRepository] = None
    temp_clone_token: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    code_of_conduct: Optional[CodeOfConduct] = None
    license: Optional[License] = None
    forks: Optional[int] = Field(None, example=0)
    open_issues: Optional[int] = Field(None, example=0)
    watchers: Optional[int] = Field(None, example=0)
    allow_forking: Optional[bool] = None


class OrganizationSecretScanningAlert(BaseModel):
    number: Optional[AlertNumber] = None
    created_at: Optional[AlertCreatedAt] = None
    url: Optional[AlertUrl] = None
    html_url: Optional[AlertHtmlUrl] = None
    locations_url: Optional[AnyUrl] = Field(
        None, description='The REST API URL of the code locations for this alert.'
    )
    state: Optional[SecretScanningAlertState] = None
    resolution: Optional[SecretScanningAlertResolution] = None
    resolved_at: Optional[datetime] = Field(
        None,
        description='The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    resolved_by: Optional[NullableSimpleUser] = None
    secret_type: Optional[str] = Field(
        None, description='The type of secret that secret scanning detected.'
    )
    secret: Optional[str] = Field(None, description='The secret that was detected.')
    repository: Optional[MinimalRepository] = None


class MinutesUsedBreakdown(BaseModel):
    ubuntu: Optional[int] = Field(
        None, alias='UBUNTU', description='Total minutes used on Ubuntu runner machines.'
    )
    macos: Optional[int] = Field(
        None, alias='MACOS', description='Total minutes used on macOS runner machines.'
    )
    windows: Optional[int] = Field(
        None, alias='WINDOWS', description='Total minutes used on Windows runner machines.'
    )


class ActionsBillingUsage(BaseModel):
    total_minutes_used: int = Field(
        ..., description='The sum of the free and paid GitHub Actions minutes used.'
    )
    total_paid_minutes_used: int = Field(
        ..., description='The total paid GitHub Actions minutes used.'
    )
    included_minutes: int = Field(
        ..., description='The amount of free GitHub Actions minutes available.'
    )
    minutes_used_breakdown: MinutesUsedBreakdown


class AdvancedSecurityActiveCommittersUser(BaseModel):
    user_login: str
    last_pushed_date: str = Field(..., example='2021-11-03')


class AdvancedSecurityActiveCommittersRepository(BaseModel):
    name: str = Field(..., example='octocat/Hello-World')
    advanced_security_committers: int = Field(..., example=25)
    advanced_security_committers_breakdown: List[AdvancedSecurityActiveCommittersUser]


class AdvancedSecurityActiveCommitters(BaseModel):
    total_advanced_security_committers: Optional[int] = Field(None, example=25)
    repositories: List[AdvancedSecurityActiveCommittersRepository]


class PackagesBillingUsage(BaseModel):
    total_gigabytes_bandwidth_used: int = Field(
        ..., description='Sum of the free and paid storage space (GB) for GitHuub Packages.'
    )
    total_paid_gigabytes_bandwidth_used: int = Field(
        ..., description='Total paid storage space (GB) for GitHuub Packages.'
    )
    included_gigabytes_bandwidth: int = Field(
        ..., description='Free storage space (GB) for GitHub Packages.'
    )


class CombinedBillingUsage(BaseModel):
    days_left_in_billing_cycle: int = Field(
        ..., description='Numbers of days left in billing cycle.'
    )
    estimated_paid_storage_for_month: int = Field(
        ..., description='Estimated storage space (GB) used in billing cycle.'
    )
    estimated_storage_for_month: int = Field(
        ..., description='Estimated sum of free and paid storage space (GB) used in billing cycle.'
    )


class Actor(BaseModel):
    """
    Actor
    """

    id: int
    login: str
    display_login: Optional[str] = None
    gravatar_id: str
    url: AnyUrl
    avatar_url: AnyUrl


class State(Enum):
    """
    The state of the milestone.
    """

    open = 'open'
    closed = 'closed'


class NullableMilestone(BaseModel):
    """
    A collection of related issues and pull requests.
    """

    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/milestones/1'
    )
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/milestones/v1.0')
    labels_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/milestones/1/labels'
    )
    id: int = Field(..., example=1002604)
    node_id: str = Field(..., example='MDk6TWlsZXN0b25lMTAwMjYwNA==')
    number: int = Field(..., description='The number of the milestone.', example=42)
    state: Optional[State] = Field(
        'open', description='The state of the milestone.', example='open'
    )
    title: str = Field(..., description='The title of the milestone.', example='v1.0')
    description: str = Field(..., example='Tracking milestone for version 1.0')
    creator: NullableSimpleUser
    open_issues: int = Field(..., example=4)
    closed_issues: int = Field(..., example=8)
    created_at: datetime = Field(..., example='2011-04-10T20:09:31Z')
    updated_at: datetime = Field(..., example='2014-03-03T18:58:10Z')
    closed_at: datetime = Field(..., example='2013-02-12T13:22:01Z')
    due_on: datetime = Field(..., example='2012-10-09T23:39:01Z')


class Permissions6(Permissions):
    """
    The set of permissions for the GitHub app
    """

    pass


class NullableIntegration(BaseModel):
    """
    GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    """

    id: int = Field(..., description='Unique identifier of the GitHub app', example=37)
    slug: Optional[str] = Field(
        None, description='The slug name of the GitHub app', example='probot-owners'
    )
    node_id: str = Field(..., example='MDExOkludGVncmF0aW9uMQ==')
    owner: NullableSimpleUser
    name: str = Field(..., description='The name of the GitHub app', example='Probot Owners')
    description: str = Field(..., example='The description of the app.')
    external_url: AnyUrl = Field(..., example='https://example.com')
    html_url: AnyUrl = Field(..., example='https://github.com/apps/super-ci')
    created_at: datetime = Field(..., example='2017-07-08T16:18:44-04:00')
    updated_at: datetime = Field(..., example='2017-07-08T16:18:44-04:00')
    permissions: Permissions6 = Field(
        ...,
        description='The set of permissions for the GitHub app',
        example={'issues': 'read', 'deployments': 'write'},
    )
    events: List[str] = Field(
        ..., description='The list of events for the GitHub app', example=['label', 'deployment']
    )
    installations_count: Optional[int] = Field(
        None, description='The number of installations associated with the GitHub app', example=5
    )
    client_id: Optional[str] = Field(None, example='"Iv1.25b5d1e65ffc4022"')
    client_secret: Optional[str] = Field(None, example='"1d4b2097ac622ba702d19de498f005747a8b21d3"')
    webhook_secret: Optional[str] = Field(
        None, example='"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"'
    )
    pem: Optional[str] = Field(
        None,
        example='"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"',
    )


class AuthorAssociation(Enum):
    """
    How the author is associated with the repository.
    """

    collaborator = 'COLLABORATOR'
    contributor = 'CONTRIBUTOR'
    first_timer = 'FIRST_TIMER'
    first_time_contributor = 'FIRST_TIME_CONTRIBUTOR'
    mannequin = 'MANNEQUIN'
    member = 'MEMBER'
    none = 'NONE'
    owner = 'OWNER'


class ReactionRollup(BaseModel):
    url: AnyUrl
    total_count: int
    _1: int = Field(..., alias='+1')
    _1_1: int = Field(..., alias='-1')
    laugh: int
    confused: int
    heart: int
    hooray: int
    eyes: int
    rocket: int


class Label(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[AnyUrl] = None
    name: Optional[str] = None
    description: Optional[str] = None
    color: Optional[str] = None
    default: Optional[bool] = None


class PullRequest(BaseModel):
    merged_at: Optional[datetime] = None
    diff_url: AnyUrl
    html_url: AnyUrl
    patch_url: AnyUrl
    url: AnyUrl


class Issue(BaseModel):
    """
    Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
    """

    id: int
    node_id: str
    url: AnyUrl = Field(
        ...,
        description='URL for the issue',
        example='https://api.github.com/repositories/42/issues/1',
    )
    repository_url: AnyUrl
    labels_url: str
    comments_url: AnyUrl
    events_url: AnyUrl
    html_url: AnyUrl
    number: int = Field(
        ..., description='Number uniquely identifying the issue within its repository', example=42
    )
    state: str = Field(
        ..., description="State of the issue; either 'open' or 'closed'", example='open'
    )
    title: str = Field(
        ...,
        description='Title of the issue',
        example='Widget creation fails in Safari on OS X 10.8',
    )
    body: Optional[str] = Field(
        None,
        description='Contents of the issue',
        example='It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    )
    user: NullableSimpleUser
    labels: List[Union[str, Label]] = Field(
        ...,
        description='Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository',
        example=['bug', 'registration'],
    )
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    milestone: NullableMilestone
    locked: bool
    active_lock_reason: Optional[str] = None
    comments: int
    pull_request: Optional[PullRequest] = None
    closed_at: datetime
    created_at: datetime
    updated_at: datetime
    draft: Optional[bool] = None
    closed_by: Optional[NullableSimpleUser] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    repository: Optional[Repository] = None
    performed_via_github_app: Optional[NullableIntegration] = None
    author_association: AuthorAssociation
    reactions: Optional[ReactionRollup] = None


class IssueComment(BaseModel):
    """
    Comments provide a way for people to collaborate on an issue.
    """

    id: int = Field(..., description='Unique identifier of the issue comment', example=42)
    node_id: str
    url: AnyUrl = Field(
        ...,
        description='URL for the issue comment',
        example='https://api.github.com/repositories/42/issues/comments/1',
    )
    body: Optional[str] = Field(
        None,
        description='Contents of the issue comment',
        example='What version of Safari were you using when you observed this bug?',
    )
    body_text: Optional[str] = None
    body_html: Optional[str] = None
    html_url: AnyUrl
    user: NullableSimpleUser
    created_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    updated_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    issue_url: AnyUrl
    author_association: AuthorAssociation
    performed_via_github_app: Optional[NullableIntegration] = None
    reactions: Optional[ReactionRollup] = None


class Repo(BaseModel):
    id: int
    name: str
    url: AnyUrl


class Page(BaseModel):
    page_name: Optional[str] = None
    title: Optional[str] = None
    summary: Optional[str] = None
    action: Optional[str] = None
    sha: Optional[str] = None
    html_url: Optional[str] = None


class Payload(BaseModel):
    action: Optional[str] = None
    issue: Optional[Issue] = None
    comment: Optional[IssueComment] = None
    pages: Optional[List[Page]] = None


class Event(BaseModel):
    """
    Event
    """

    id: str
    type: str
    actor: Actor
    repo: Repo
    org: Optional[Actor] = None
    payload: Payload
    public: bool
    created_at: datetime


class LinkWithType(BaseModel):
    """
    Hypermedia Link with Type
    """

    href: str
    type: str


class _Links(BaseModel):
    timeline: LinkWithType
    user: LinkWithType
    security_advisories: Optional[LinkWithType] = None
    current_user: Optional[LinkWithType] = None
    current_user_public: Optional[LinkWithType] = None
    current_user_actor: Optional[LinkWithType] = None
    current_user_organization: Optional[LinkWithType] = None
    current_user_organizations: Optional[List[LinkWithType]] = None


class Feed(BaseModel):
    """
    Feed
    """

    timeline_url: str = Field(..., example='https://github.com/timeline')
    user_url: str = Field(..., example='https://github.com/{user}')
    current_user_public_url: Optional[str] = Field(None, example='https://github.com/octocat')
    current_user_url: Optional[str] = Field(
        None, example='https://github.com/octocat.private?token=abc123'
    )
    current_user_actor_url: Optional[str] = Field(
        None, example='https://github.com/octocat.private.actor?token=abc123'
    )
    current_user_organization_url: Optional[str] = Field(
        None, example='https://github.com/octocat-org'
    )
    current_user_organization_urls: Optional[List[AnyUrl]] = Field(
        None, example=['https://github.com/organizations/github/octocat.private.atom?token=abc123']
    )
    security_advisories_url: Optional[str] = Field(
        None, example='https://github.com/security-advisories'
    )
    _links: _Links


class Files(BaseModel):
    filename: Optional[str] = None
    type: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None


class BaseGist(BaseModel):
    """
    Base Gist
    """

    url: AnyUrl
    forks_url: AnyUrl
    commits_url: AnyUrl
    id: str
    node_id: str
    git_pull_url: AnyUrl
    git_push_url: AnyUrl
    html_url: AnyUrl
    files: Dict[str, Files]
    public: bool
    created_at: datetime
    updated_at: datetime
    description: str
    comments: int
    user: NullableSimpleUser
    comments_url: AnyUrl
    owner: Optional[SimpleUser] = None
    truncated: Optional[bool] = None
    forks: Optional[List] = None
    history: Optional[List] = None


class Plan(BaseModel):
    collaborators: int
    name: str
    space: int
    private_repos: int


class PublicUser(BaseModel):
    """
    Public User
    """

    class Config:
        extra = Extra.forbid

    login: str
    id: int
    node_id: str
    avatar_url: AnyUrl
    gravatar_id: str
    url: AnyUrl
    html_url: AnyUrl
    followers_url: AnyUrl
    following_url: str
    gists_url: str
    starred_url: str
    subscriptions_url: AnyUrl
    organizations_url: AnyUrl
    repos_url: AnyUrl
    events_url: str
    received_events_url: AnyUrl
    type: str
    site_admin: bool
    name: str
    company: str
    blog: str
    location: str
    email: EmailStr
    hireable: bool
    bio: str
    twitter_username: Optional[str] = None
    public_repos: int
    public_gists: int
    followers: int
    following: int
    created_at: datetime
    updated_at: datetime
    plan: Optional[Plan] = None
    suspended_at: Optional[datetime] = None
    private_gists: Optional[int] = Field(None, example=1)
    total_private_repos: Optional[int] = Field(None, example=2)
    owned_private_repos: Optional[int] = Field(None, example=2)
    disk_usage: Optional[int] = Field(None, example=1)
    collaborators: Optional[int] = Field(None, example=3)


class ChangeStatus(BaseModel):
    total: Optional[int] = None
    additions: Optional[int] = None
    deletions: Optional[int] = None


class GistHistory(BaseModel):
    """
    Gist History
    """

    user: Optional[NullableSimpleUser] = None
    version: Optional[str] = None
    committed_at: Optional[datetime] = None
    change_status: Optional[ChangeStatus] = None
    url: Optional[AnyUrl] = None


class Fork(BaseModel):
    id: Optional[str] = None
    url: Optional[AnyUrl] = None
    user: Optional[PublicUser] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None


class Files1(Files):
    pass


class ForkOf(BaseModel):
    """
    Gist
    """

    url: AnyUrl
    forks_url: AnyUrl
    commits_url: AnyUrl
    id: str
    node_id: str
    git_pull_url: AnyUrl
    git_push_url: AnyUrl
    html_url: AnyUrl
    files: Dict[str, Files1]
    public: bool
    created_at: datetime
    updated_at: datetime
    description: str
    comments: int
    user: NullableSimpleUser
    comments_url: AnyUrl
    owner: Optional[NullableSimpleUser] = None
    truncated: Optional[bool] = None
    forks: Optional[List] = None
    history: Optional[List] = None


class Files2(BaseModel):
    filename: Optional[str] = None
    type: Optional[str] = None
    language: Optional[str] = None
    raw_url: Optional[str] = None
    size: Optional[int] = None
    truncated: Optional[bool] = None
    content: Optional[str] = None


class GistSimple(BaseModel):
    """
    Gist Simple
    """

    forks: Optional[List[Fork]] = Field(None, deprecated=True)
    history: Optional[List[GistHistory]] = Field(None, deprecated=True)
    fork_of: Optional[ForkOf] = Field(None, description='Gist', title='Gist')
    url: Optional[str] = None
    forks_url: Optional[str] = None
    commits_url: Optional[str] = None
    id: Optional[str] = None
    node_id: Optional[str] = None
    git_pull_url: Optional[str] = None
    git_push_url: Optional[str] = None
    html_url: Optional[str] = None
    files: Optional[Dict[str, Files2]] = None
    public: Optional[bool] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    description: Optional[str] = None
    comments: Optional[int] = None
    user: Optional[str] = None
    comments_url: Optional[str] = None
    owner: Optional[SimpleUser] = None
    truncated: Optional[bool] = None


class GistComment(BaseModel):
    """
    A comment made to a gist.
    """

    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDExOkdpc3RDb21tZW50MQ==')
    url: AnyUrl = Field(..., example='https://api.github.com/gists/a6db0bec360bb87e9418/comments/1')
    body: constr(max_length=65535) = Field(
        ..., description='The comment text.', example='Body of the attachment'
    )
    user: NullableSimpleUser
    created_at: datetime = Field(..., example='2011-04-18T23:23:56Z')
    updated_at: datetime = Field(..., example='2011-04-18T23:23:56Z')
    author_association: AuthorAssociation


class ChangeStatus1(ChangeStatus):
    pass


class GistCommit(BaseModel):
    """
    Gist Commit
    """

    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f',
    )
    version: str = Field(..., example='57a7f021a713b1c5a6a199b54cc514735d2d462f')
    user: NullableSimpleUser
    change_status: ChangeStatus1
    committed_at: datetime = Field(..., example='2010-04-14T02:15:15Z')


class GitignoreTemplate(BaseModel):
    """
    Gitignore Template
    """

    name: str = Field(..., example='C')
    source: str = Field(
        ...,
        example='# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n',
    )


class LicenseSimple(NullableLicenseSimple):
    """
    License Simple
    """

    pass


class License1(BaseModel):
    """
    License
    """

    key: str = Field(..., example='mit')
    name: str = Field(..., example='MIT License')
    spdx_id: str = Field(..., example='MIT')
    url: AnyUrl = Field(..., example='https://api.github.com/licenses/mit')
    node_id: str = Field(..., example='MDc6TGljZW5zZW1pdA==')
    html_url: AnyUrl = Field(..., example='http://choosealicense.com/licenses/mit/')
    description: str = Field(
        ...,
        example='A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.',
    )
    implementation: str = Field(
        ...,
        example='Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.',
    )
    permissions: List[str] = Field(
        ...,
        example=['commercial-use', 'modifications', 'distribution', 'sublicense', 'private-use'],
    )
    conditions: List[str] = Field(..., example=['include-copyright'])
    limitations: List[str] = Field(..., example=['no-liability'])
    body: str = Field(
        ...,
        example='\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n',
    )
    featured: bool = Field(..., example=True)


class MarketplaceListingPlan(BaseModel):
    """
    Marketplace Listing Plan
    """

    url: AnyUrl = Field(..., example='https://api.github.com/marketplace_listing/plans/1313')
    accounts_url: AnyUrl = Field(
        ..., example='https://api.github.com/marketplace_listing/plans/1313/accounts'
    )
    id: int = Field(..., example=1313)
    number: int = Field(..., example=3)
    name: str = Field(..., example='Pro')
    description: str = Field(..., example='A professional-grade CI solution')
    monthly_price_in_cents: int = Field(..., example=1099)
    yearly_price_in_cents: int = Field(..., example=11870)
    price_model: str = Field(..., example='flat-rate')
    has_free_trial: bool = Field(..., example=True)
    unit_name: str
    state: str = Field(..., example='published')
    bullets: List[str] = Field(
        ..., example=['Up to 25 private repositories', '11 concurrent builds']
    )


class MarketplacePendingChange(BaseModel):
    is_installed: Optional[bool] = None
    effective_date: Optional[str] = None
    unit_count: Optional[int] = None
    id: Optional[int] = None
    plan: Optional[MarketplaceListingPlan] = None


class MarketplacePurchase1(BaseModel):
    billing_cycle: Optional[str] = None
    next_billing_date: Optional[str] = None
    is_installed: Optional[bool] = None
    unit_count: Optional[int] = None
    on_free_trial: Optional[bool] = None
    free_trial_ends_on: Optional[str] = None
    updated_at: Optional[str] = None
    plan: Optional[MarketplaceListingPlan] = None


class MarketplacePurchase(BaseModel):
    """
    Marketplace Purchase
    """

    url: str
    type: str
    id: int
    login: str
    organization_billing_email: Optional[str] = None
    email: Optional[str] = None
    marketplace_pending_change: Optional[MarketplacePendingChange] = None
    marketplace_purchase: MarketplacePurchase1


class SshKeyFingerprints(BaseModel):
    sha256_rsa: Optional[str] = Field(None, alias='SHA256_RSA')
    sha256_dsa: Optional[str] = Field(None, alias='SHA256_DSA')
    sha256_ecdsa: Optional[str] = Field(None, alias='SHA256_ECDSA')
    sha256_ed25519: Optional[str] = Field(None, alias='SHA256_ED25519')


class ApiOverview(BaseModel):
    """
    Api Overview
    """

    verifiable_password_authentication: bool = Field(..., example=True)
    ssh_key_fingerprints: Optional[SshKeyFingerprints] = None
    ssh_keys: Optional[List[str]] = Field(
        None,
        example=[
            'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl'
        ],
    )
    hooks: Optional[List[str]] = Field(None, example=['127.0.0.1/32'])
    web: Optional[List[str]] = Field(None, example=['127.0.0.1/32'])
    api: Optional[List[str]] = Field(None, example=['127.0.0.1/32'])
    git: Optional[List[str]] = Field(None, example=['127.0.0.1/32'])
    packages: Optional[List[str]] = Field(
        None, example=['13.65.0.0/16', '157.55.204.33/32', '2a01:111:f403:f90c::/62']
    )
    pages: Optional[List[str]] = Field(None, example=['192.30.252.153/32', '192.30.252.154/32'])
    importer: Optional[List[str]] = Field(None, example=['54.158.161.132', '54.226.70.38'])
    actions: Optional[List[str]] = Field(None, example=['13.64.0.0/16', '13.65.0.0/16'])
    dependabot: Optional[List[str]] = Field(None, example=['192.168.7.15/32', '192.168.7.16/32'])


class Subject(BaseModel):
    title: str
    url: str
    latest_comment_url: str
    type: str


class Thread(BaseModel):
    """
    Thread
    """

    id: str
    repository: MinimalRepository
    subject: Subject
    reason: str
    unread: bool
    updated_at: str
    last_read_at: str
    url: str
    subscription_url: str = Field(
        ..., example='https://api.github.com/notifications/threads/2/subscription'
    )


class ThreadSubscription(BaseModel):
    """
    Thread Subscription
    """

    subscribed: bool = Field(..., example=True)
    ignored: bool
    reason: str
    created_at: datetime = Field(..., example='2012-10-06T21:34:12Z')
    url: AnyUrl = Field(..., example='https://api.github.com/notifications/threads/1/subscription')
    thread_url: Optional[AnyUrl] = Field(
        None, example='https://api.github.com/notifications/threads/1'
    )
    repository_url: Optional[AnyUrl] = Field(None, example='https://api.github.com/repos/1')


class OrganizationCustomRepositoryRole(BaseModel):
    """
    Custom repository roles created by organization administrators
    """

    id: int
    name: str


class Group(BaseModel):
    group_id: int = Field(..., description='The internal ID of the group', example=1)
    group_name: str = Field(
        ..., description='The display name of the group', example='group-azuread-test'
    )
    updated_at: str = Field(
        ...,
        description='The time of the last update for this group',
        example='2019-06-03 22:27:15:000 -700',
    )


class ExternalGroups(BaseModel):
    """
    A list of external groups available to be connected to a team
    """

    groups: Optional[List[Group]] = Field(
        None,
        description='An array of external groups available to be mapped to a team',
        example=[
            {
                'group_id': 1,
                'group_name': 'group-azuread-test',
                'updated_at': '2021-01-03 22:27:15:000 -700',
            },
            {
                'group_id': 2,
                'group_name': 'group-azuread-test2',
                'updated_at': '2021-06-03 22:27:15:000 -700',
            },
        ],
    )


class Plan1(BaseModel):
    name: str
    space: int
    private_repos: int
    filled_seats: Optional[int] = None
    seats: Optional[int] = None


class OrganizationFull(BaseModel):
    """
    Organization Full
    """

    login: str = Field(..., example='github')
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDEyOk9yZ2FuaXphdGlvbjE=')
    url: AnyUrl = Field(..., example='https://api.github.com/orgs/github')
    repos_url: AnyUrl = Field(..., example='https://api.github.com/orgs/github/repos')
    events_url: AnyUrl = Field(..., example='https://api.github.com/orgs/github/events')
    hooks_url: str = Field(..., example='https://api.github.com/orgs/github/hooks')
    issues_url: str = Field(..., example='https://api.github.com/orgs/github/issues')
    members_url: str = Field(..., example='https://api.github.com/orgs/github/members{/member}')
    public_members_url: str = Field(
        ..., example='https://api.github.com/orgs/github/public_members{/member}'
    )
    avatar_url: str = Field(..., example='https://github.com/images/error/octocat_happy.gif')
    description: str = Field(..., example='A great organization')
    name: Optional[str] = Field(None, example='github')
    company: Optional[str] = Field(None, example='GitHub')
    blog: Optional[AnyUrl] = Field(None, example='https://github.com/blog')
    location: Optional[str] = Field(None, example='San Francisco')
    email: Optional[EmailStr] = Field(None, example='octocat@github.com')
    twitter_username: Optional[str] = Field(None, example='github')
    is_verified: Optional[bool] = Field(None, example=True)
    has_organization_projects: bool = Field(..., example=True)
    has_repository_projects: bool = Field(..., example=True)
    public_repos: int = Field(..., example=2)
    public_gists: int = Field(..., example=1)
    followers: int = Field(..., example=20)
    following: int = Field(..., example=0)
    html_url: AnyUrl = Field(..., example='https://github.com/octocat')
    created_at: datetime = Field(..., example='2008-01-14T04:33:35Z')
    type: str = Field(..., example='Organization')
    total_private_repos: Optional[int] = Field(None, example=100)
    owned_private_repos: Optional[int] = Field(None, example=100)
    private_gists: Optional[int] = Field(None, example=81)
    disk_usage: Optional[int] = Field(None, example=10000)
    collaborators: Optional[int] = Field(None, example=8)
    billing_email: Optional[EmailStr] = Field(None, example='org@example.com')
    plan: Optional[Plan1] = None
    default_repository_permission: Optional[str] = None
    members_can_create_repositories: Optional[bool] = Field(None, example=True)
    two_factor_requirement_enabled: Optional[bool] = Field(None, example=True)
    members_allowed_repository_creation_type: Optional[str] = Field(None, example='all')
    members_can_create_public_repositories: Optional[bool] = Field(None, example=True)
    members_can_create_private_repositories: Optional[bool] = Field(None, example=True)
    members_can_create_internal_repositories: Optional[bool] = Field(None, example=True)
    members_can_create_pages: Optional[bool] = Field(None, example=True)
    members_can_create_public_pages: Optional[bool] = Field(None, example=True)
    members_can_create_private_pages: Optional[bool] = Field(None, example=True)
    members_can_fork_private_repositories: Optional[bool] = Field(None, example=False)
    updated_at: datetime


class ActionsOrganizationPermissions(BaseModel):
    enabled_repositories: EnabledOrganizations
    selected_repositories_url: Optional[str] = Field(
        None,
        description='The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.',
    )
    allowed_actions: Optional[AllowedActions] = None
    selected_actions_url: Optional[SelectedActionsUrl] = None


class ActionsCanApprovePullRequestReviews(BaseModel):
    __root__: bool = Field(
        ..., description='Whether GitHub Actions can submit approving pull request reviews.'
    )


class ActionsGetDefaultWorkflowPermissions(BaseModel):
    default_workflow_permissions: Actions
    can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews


class ActionsSetDefaultWorkflowPermissions(BaseModel):
    default_workflow_permissions: Optional[Actions] = None
    can_approve_pull_request_reviews: Optional[ActionsCanApprovePullRequestReviews] = None


class RunnerGroupsOrg(BaseModel):
    id: float
    name: str
    visibility: str
    default: bool
    selected_repositories_url: Optional[str] = Field(
        None,
        description='Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`',
    )
    runners_url: str
    inherited: bool
    inherited_allows_public_repositories: Optional[bool] = None
    allows_public_repositories: bool


class Visibility(Enum):
    """
    Visibility of a secret
    """

    all = 'all'
    private = 'private'
    selected = 'selected'


class OrganizationActionsSecret(BaseModel):
    """
    Secrets for GitHub Actions for an organization.
    """

    name: str = Field(..., description='The name of the secret.', example='SECRET_TOKEN')
    created_at: datetime
    updated_at: datetime
    visibility: Visibility = Field(..., description='Visibility of a secret')
    selected_repositories_url: Optional[AnyUrl] = Field(
        None, example='https://api.github.com/organizations/org/secrets/my_secret/repositories'
    )


class ActionsPublicKey(BaseModel):
    """
    The public key used for setting Actions Secrets.
    """

    key_id: str = Field(..., description='The identifier for the key.', example='1234567')
    key: str = Field(
        ...,
        description='The Base64 encoded public key.',
        example='hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
    )
    id: Optional[int] = Field(None, example=2)
    url: Optional[str] = Field(None, example='https://api.github.com/user/keys/2')
    title: Optional[str] = Field(None, example='ssh-rsa AAAAB3NzaC1yc2EAAA')
    created_at: Optional[str] = Field(None, example='2011-01-26T19:01:12Z')


class EmptyObject(BaseModel):
    """
    An object without any properties.
    """

    pass

    class Config:
        extra = Extra.forbid


class CodeScanningAlertState(Enum):
    """
    State of a code scanning alert.
    """

    open = 'open'
    closed = 'closed'
    dismissed = 'dismissed'
    fixed = 'fixed'


class AlertUpdatedAt(BaseModel):
    __root__: datetime = Field(
        ...,
        description='The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
        read_only=True,
    )


class AlertInstancesUrl(BaseModel):
    __root__: AnyUrl = Field(
        ...,
        description='The REST API URL for fetching the list of instances for an alert.',
        read_only=True,
    )


class CodeScanningAlertFixedAt(BaseModel):
    __root__: Optional[datetime] = Field(
        None,
        description='The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
        read_only=True,
    )


class CodeScanningAlertDismissedAt(BaseModel):
    __root__: Optional[datetime] = Field(
        None,
        description='The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
        read_only=True,
    )


class CodeScanningAlertDismissedReasonEnum(Enum):
    """
    **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
    """

    false_positive = 'false positive'
    won_t_fix = 'won\'t fix'
    used_in_tests = 'used in tests'


class CodeScanningAlertDismissedReason(BaseModel):
    __root__: Optional[CodeScanningAlertDismissedReasonEnum] = Field(
        None,
        description="**Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.",
    )


class Severity(Enum):
    """
    The severity of the alert.
    """

    none = 'none'
    note = 'note'
    warning = 'warning'
    error = 'error'


class SecuritySeverityLevel(Enum):
    """
    The security severity of the alert.
    """

    low = 'low'
    medium = 'medium'
    high = 'high'
    critical = 'critical'


class CodeScanningAlertRule(BaseModel):
    id: Optional[str] = Field(
        None, description='A unique identifier for the rule used to detect the alert.'
    )
    name: Optional[str] = Field(None, description='The name of the rule used to detect the alert.')
    severity: Optional[Severity] = Field(None, description='The severity of the alert.')
    security_severity_level: Optional[SecuritySeverityLevel] = Field(
        None, description='The security severity of the alert.'
    )
    description: Optional[str] = Field(
        None, description='A short description of the rule used to detect the alert.'
    )
    full_description: Optional[str] = Field(
        None, description='description of the rule used to detect the alert.'
    )
    tags: Optional[List[str]] = Field(None, description='A set of tags applicable for the rule.')
    help: Optional[str] = Field(
        None, description='Detailed documentation for the rule as GitHub Flavored Markdown.'
    )


class CodeScanningAnalysisToolName(BaseModel):
    __root__: str = Field(
        ..., description='The name of the tool used to generate the code scanning analysis.'
    )


class CodeScanningAnalysisToolVersion(BaseModel):
    __root__: Optional[str] = Field(
        None, description='The version of the tool used to generate the code scanning analysis.'
    )


class CodeScanningAnalysisToolGuid(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description='The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.',
    )


class CodeScanningAnalysisTool(BaseModel):
    name: Optional[CodeScanningAnalysisToolName] = None
    version: Optional[CodeScanningAnalysisToolVersion] = None
    guid: Optional[CodeScanningAnalysisToolGuid] = None


class CodeScanningRef(BaseModel):
    __root__: str = Field(
        ...,
        description='The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`.',
    )


class CodeScanningAnalysisAnalysisKey(BaseModel):
    __root__: str = Field(
        ...,
        description='Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.',
    )


class CodeScanningAlertEnvironment(BaseModel):
    __root__: str = Field(
        ...,
        description='Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.',
    )


class CodeScanningAnalysisCategory(BaseModel):
    __root__: str = Field(
        ...,
        description='Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.',
    )


class CodeScanningAlertLocation(BaseModel):
    """
    Describe a region within a file for the alert.
    """

    path: Optional[str] = None
    start_line: Optional[int] = None
    end_line: Optional[int] = None
    start_column: Optional[int] = None
    end_column: Optional[int] = None


class CodeScanningAlertClassification(Enum):
    """
    A classification of the file. For example to identify it as generated.
    """

    source = 'source'
    generated = 'generated'
    test = 'test'
    library = 'library'


class Message(BaseModel):
    text: Optional[str] = None


class CodeScanningAlertInstance(BaseModel):
    ref: Optional[CodeScanningRef] = None
    analysis_key: Optional[CodeScanningAnalysisAnalysisKey] = None
    environment: Optional[CodeScanningAlertEnvironment] = None
    category: Optional[CodeScanningAnalysisCategory] = None
    state: Optional[CodeScanningAlertState] = None
    commit_sha: Optional[str] = None
    message: Optional[Message] = None
    location: Optional[CodeScanningAlertLocation] = None
    html_url: Optional[str] = None
    classifications: Optional[List[CodeScanningAlertClassification]] = Field(
        None,
        description='Classifications that have been applied to the file that triggered the alert.\nFor example identifying it as documentation, or a generated file.',
    )


class CodeScanningOrganizationAlertItems(BaseModel):
    number: AlertNumber
    created_at: AlertCreatedAt
    updated_at: Optional[AlertUpdatedAt] = None
    url: AlertUrl
    html_url: AlertHtmlUrl
    instances_url: AlertInstancesUrl
    state: CodeScanningAlertState
    fixed_at: Optional[CodeScanningAlertFixedAt] = None
    dismissed_by: NullableSimpleUser
    dismissed_at: CodeScanningAlertDismissedAt
    dismissed_reason: CodeScanningAlertDismissedReason
    rule: CodeScanningAlertRule
    tool: CodeScanningAnalysisTool
    most_recent_instance: CodeScanningAlertInstance
    repository: MinimalRepository


class CredentialAuthorization(BaseModel):
    """
    Credential Authorization
    """

    login: str = Field(
        ..., description='User login that owns the underlying credential.', example='monalisa'
    )
    credential_id: int = Field(..., description='Unique identifier for the credential.', example=1)
    credential_type: str = Field(
        ..., description='Human-readable description of the credential type.', example='SSH Key'
    )
    token_last_eight: Optional[str] = Field(
        None,
        description='Last eight characters of the credential. Only included in responses with credential_type of personal access token.',
        example='12345678',
    )
    credential_authorized_at: datetime = Field(
        ...,
        description='Date when the credential was authorized for use.',
        example='2011-01-26T19:06:43Z',
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='List of oauth scopes the token has been granted.',
        example=['user', 'repo'],
    )
    fingerprint: Optional[str] = Field(
        None,
        description='Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.',
        example='jklmnop12345678',
    )
    credential_accessed_at: datetime = Field(
        ...,
        description='Date when the credential was last accessed. May be null if it was never accessed',
        example='2011-01-26T19:06:43Z',
    )
    authorized_credential_id: int = Field(..., example=12345678)
    authorized_credential_title: Optional[str] = Field(
        None,
        description='The title given to the ssh key. This will only be present when the credential is an ssh key.',
        example='my ssh key',
    )
    authorized_credential_note: Optional[str] = Field(
        None,
        description='The note given to the token. This will only be present when the credential is a token.',
        example='my token',
    )
    authorized_credential_expires_at: Optional[datetime] = Field(
        None,
        description='The expiry for the token. This will only be present when the credential is a token.',
    )


class OrganizationDependabotSecret(BaseModel):
    """
    Secrets for GitHub Dependabot for an organization.
    """

    name: str = Field(..., description='The name of the secret.', example='SECRET_TOKEN')
    created_at: datetime
    updated_at: datetime
    visibility: Visibility = Field(..., description='Visibility of a secret')
    selected_repositories_url: Optional[AnyUrl] = Field(
        None,
        example='https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories',
    )


class DependabotPublicKey(BaseModel):
    """
    The public key used for setting Dependabot Secrets.
    """

    key_id: str = Field(..., description='The identifier for the key.', example='1234567')
    key: str = Field(
        ...,
        description='The Base64 encoded public key.',
        example='hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
    )


class Team(BaseModel):
    team_id: int = Field(..., description='The id for a team', example=1)
    team_name: str = Field(..., description='The name of the team', example='team-test')


class Member(BaseModel):
    member_id: int = Field(..., description='The internal user ID of the identity', example=1)
    member_login: str = Field(
        ..., description='The handle/login for the user', example='mona-lisa_eocsaxrs'
    )
    member_name: str = Field(
        ..., description='The user display name/profile name', example='Mona Lisa'
    )
    member_email: str = Field(
        ..., description='An email attached to a user', example='mona_lisa@github.com'
    )


class ExternalGroup(BaseModel):
    """
    Information about an external group's usage and its members
    """

    group_id: int = Field(..., description='The internal ID of the group', example=1)
    group_name: str = Field(
        ..., description='The display name for the group', example='group-azuread-test'
    )
    updated_at: Optional[str] = Field(
        None,
        description='The date when the group was last updated_at',
        example='2021-01-03 22:27:15:000 -700',
    )
    teams: List[Team] = Field(
        ...,
        description='An array of teams linked to this group',
        example=[
            {'team_id': 1, 'team_name': 'team-test'},
            {'team_id': 2, 'team_name': 'team-test2'},
        ],
    )
    members: List[Member] = Field(
        ...,
        description='An array of external members linked to this group',
        example=[
            {
                'member_id': 1,
                'member_login': 'mona-lisa_eocsaxrs',
                'member_name': 'Mona Lisa',
                'member_email': 'mona_lisa@github.com',
            },
            {
                'member_id': 2,
                'member_login': 'octo-lisa_eocsaxrs',
                'member_name': 'Octo Lisa',
                'member_email': 'octo_lisa@github.com',
            },
        ],
    )


class OrganizationInvitation(BaseModel):
    """
    Organization Invitation
    """

    id: int
    login: str
    email: str
    role: str
    created_at: str
    failed_at: Optional[str] = None
    failed_reason: Optional[str] = None
    inviter: SimpleUser
    team_count: int
    node_id: str = Field(..., example='"MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"')
    invitation_teams_url: str = Field(
        ..., example='"https://api.github.com/organizations/16/invitations/1/teams"'
    )


class Config(BaseModel):
    url: Optional[str] = Field(None, example='"http://example.com/2"')
    insecure_ssl: Optional[str] = Field(None, example='"0"')
    content_type: Optional[str] = Field(None, example='"form"')
    secret: Optional[str] = Field(None, example='"********"')


class OrgHook(BaseModel):
    """
    Org Hook
    """

    id: int = Field(..., example=1)
    url: AnyUrl = Field(..., example='https://api.github.com/orgs/octocat/hooks/1')
    ping_url: AnyUrl = Field(..., example='https://api.github.com/orgs/octocat/hooks/1/pings')
    deliveries_url: Optional[AnyUrl] = Field(
        None, example='https://api.github.com/orgs/octocat/hooks/1/deliveries'
    )
    name: str = Field(..., example='web')
    events: List[str] = Field(..., example=['push', 'pull_request'])
    active: bool = Field(..., example=True)
    config: Config
    updated_at: datetime = Field(..., example='2011-09-06T20:39:23Z')
    created_at: datetime = Field(..., example='2011-09-06T17:26:27Z')
    type: str


class InteractionGroup(Enum):
    """
    The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
    """

    existing_users = 'existing_users'
    contributors_only = 'contributors_only'
    collaborators_only = 'collaborators_only'


class InteractionLimitResponse(BaseModel):
    """
    Interaction limit settings.
    """

    limit: InteractionGroup
    origin: str = Field(..., example='repository')
    expires_at: datetime = Field(..., example='2018-08-17T04:18:39Z')


class InteractionExpiry(Enum):
    """
    The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`.
    """

    one_day = 'one_day'
    three_days = 'three_days'
    one_week = 'one_week'
    one_month = 'one_month'
    six_months = 'six_months'


class InteractionLimit(BaseModel):
    """
    Limit interactions to a specific type of user for a specified duration
    """

    limit: InteractionGroup
    expiry: Optional[InteractionExpiry] = None


class NullableTeamSimple(BaseModel):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int = Field(..., description='Unique identifier of the team', example=1)
    node_id: str = Field(..., example='MDQ6VGVhbTE=')
    url: AnyUrl = Field(
        ..., description='URL for the team', example='https://api.github.com/organizations/1/team/1'
    )
    members_url: str = Field(
        ..., example='https://api.github.com/organizations/1/team/1/members{/member}'
    )
    name: str = Field(..., description='Name of the team', example='Justice League')
    description: str = Field(..., description='Description of the team', example='A great team.')
    permission: str = Field(
        ..., description='Permission that the team will have for its repositories', example='admin'
    )
    privacy: Optional[str] = Field(
        None, description='The level of privacy this team should have', example='closed'
    )
    html_url: AnyUrl = Field(..., example='https://github.com/orgs/rails/teams/core')
    repositories_url: AnyUrl = Field(
        ..., example='https://api.github.com/organizations/1/team/1/repos'
    )
    slug: str = Field(..., example='justice-league')
    ldap_dn: Optional[str] = Field(
        None,
        description='Distinguished Name (DN) that team maps to within LDAP environment',
        example='uid=example,ou=users,dc=github,dc=com',
    )


class Permissions7(BaseModel):
    pull: bool
    triage: bool
    push: bool
    maintain: bool
    admin: bool


class Team1(BaseModel):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int
    node_id: str
    name: str
    slug: str
    description: str
    privacy: Optional[str] = None
    permission: str
    permissions: Optional[Permissions7] = None
    url: AnyUrl
    html_url: AnyUrl = Field(..., example='https://github.com/orgs/rails/teams/core')
    members_url: str
    repositories_url: AnyUrl
    parent: NullableTeamSimple


class State1(Enum):
    """
    The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
    """

    active = 'active'
    pending = 'pending'


class Role(Enum):
    """
    The user's membership type in the organization.
    """

    admin = 'admin'
    member = 'member'
    billing_manager = 'billing_manager'


class Permissions8(BaseModel):
    can_create_repository: bool


class OrgMembership(BaseModel):
    """
    Org Membership
    """

    url: AnyUrl = Field(..., example='https://api.github.com/orgs/octocat/memberships/defunkt')
    state: State1 = Field(
        ...,
        description='The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.',
        example='active',
    )
    role: Role = Field(
        ..., description="The user's membership type in the organization.", example='admin'
    )
    organization_url: AnyUrl = Field(..., example='https://api.github.com/orgs/octocat')
    organization: OrganizationSimple
    user: NullableSimpleUser
    permissions: Optional[Permissions8] = None


class Migration(BaseModel):
    """
    A migration.
    """

    id: int = Field(..., example=79)
    owner: NullableSimpleUser
    guid: str = Field(..., example='0b989ba4-242f-11e5-81e1-c7b6966d2516')
    state: str = Field(..., example='pending')
    lock_repositories: bool = Field(..., example=True)
    exclude_metadata: bool
    exclude_git_data: bool
    exclude_attachments: bool
    exclude_releases: bool
    exclude_owner_projects: bool
    repositories: List[Repository]
    url: AnyUrl = Field(..., example='https://api.github.com/orgs/octo-org/migrations/79')
    created_at: datetime = Field(..., example='2015-07-06T15:33:38-07:00')
    updated_at: datetime = Field(..., example='2015-07-06T15:33:38-07:00')
    node_id: str
    archive_url: Optional[AnyUrl] = None
    exclude: Optional[List] = None


class Permissions9(Permissions2):
    pass


class License2(License):
    pass


class NullableMinimalRepository(BaseModel):
    """
    Minimal Repository
    """

    id: int = Field(..., example=1296269)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., example='Hello-World')
    full_name: str = Field(..., example='octocat/Hello-World')
    owner: SimpleUser
    private: bool
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World')
    description: str = Field(..., example='This your first repo!')
    fork: bool
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World')
    archive_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
    )
    assignees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/assignees{/user}'
    )
    blobs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'
    )
    branches_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/branches{/branch}'
    )
    collaborators_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
    )
    comments_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/comments{/number}'
    )
    commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/commits{/sha}'
    )
    compare_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
    )
    contents_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contents/{+path}'
    )
    contributors_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contributors'
    )
    deployments_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/deployments'
    )
    downloads_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/downloads'
    )
    events_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/events'
    )
    forks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/forks')
    git_commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'
    )
    git_refs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}'
    )
    git_tags_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}'
    )
    git_url: Optional[str] = None
    issue_comment_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
    )
    issue_events_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
    )
    issues_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues{/number}'
    )
    keys_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/keys{/key_id}'
    )
    labels_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/labels{/name}'
    )
    languages_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/languages'
    )
    merges_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/merges'
    )
    milestones_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
    )
    notifications_url: str = Field(
        ...,
        example='http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    )
    pulls_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/pulls{/number}'
    )
    releases_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/releases{/id}'
    )
    ssh_url: Optional[str] = None
    stargazers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/stargazers'
    )
    statuses_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/statuses/{sha}'
    )
    subscribers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscribers'
    )
    subscription_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscription'
    )
    tags_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/tags')
    teams_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/teams')
    trees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'
    )
    clone_url: Optional[str] = None
    mirror_url: Optional[str] = None
    hooks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/hooks')
    svn_url: Optional[str] = None
    homepage: Optional[str] = None
    language: Optional[str] = None
    forks_count: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    size: Optional[int] = None
    default_branch: Optional[str] = None
    open_issues_count: Optional[int] = None
    is_template: Optional[bool] = None
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_downloads: Optional[bool] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    visibility: Optional[str] = None
    pushed_at: Optional[datetime] = Field(None, example='2011-01-26T19:06:43Z')
    created_at: Optional[datetime] = Field(None, example='2011-01-26T19:01:12Z')
    updated_at: Optional[datetime] = Field(None, example='2011-01-26T19:14:43Z')
    permissions: Optional[Permissions9] = None
    role_name: Optional[str] = Field(None, example='admin')
    template_repository: Optional[NullableRepository] = None
    temp_clone_token: Optional[str] = None
    delete_branch_on_merge: Optional[bool] = None
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    code_of_conduct: Optional[CodeOfConduct] = None
    license: Optional[License2] = None
    forks: Optional[int] = Field(None, example=0)
    open_issues: Optional[int] = Field(None, example=0)
    watchers: Optional[int] = Field(None, example=0)
    allow_forking: Optional[bool] = None


class PackageType(Enum):
    npm = 'npm'
    maven = 'maven'
    rubygems = 'rubygems'
    docker = 'docker'
    nuget = 'nuget'
    container = 'container'


class Visibility2(Enum):
    private = 'private'
    public = 'public'


class Package(BaseModel):
    """
    A software package
    """

    id: int = Field(..., description='Unique identifier of the package.', example=1)
    name: str = Field(..., description='The name of the package.', example='super-linter')
    package_type: PackageType = Field(..., example='docker')
    url: str = Field(
        ..., example='https://api.github.com/orgs/github/packages/container/super-linter'
    )
    html_url: str = Field(
        ..., example='https://github.com/orgs/github/packages/container/package/super-linter'
    )
    version_count: int = Field(..., description='The number of versions of the package.', example=1)
    visibility: Visibility2 = Field(..., example='private')
    owner: Optional[NullableSimpleUser] = None
    repository: Optional[NullableMinimalRepository] = None
    created_at: datetime
    updated_at: datetime


class Container(BaseModel):
    tags: List[str]


class Docker(BaseModel):
    tag: Optional[List[str]] = None


class Metadata1(BaseModel):
    package_type: PackageType = Field(..., example='docker')
    container: Optional[Container] = Field(None, title='Container Metadata')
    docker: Optional[Docker] = Field(None, title='Docker Metadata')


class PackageVersion(BaseModel):
    """
    A version of a software package
    """

    id: int = Field(..., description='Unique identifier of the package version.', example=1)
    name: str = Field(..., description='The name of the package version.', example='latest')
    url: str = Field(
        ...,
        example='https://api.github.com/orgs/github/packages/container/super-linter/versions/786068',
    )
    package_html_url: str = Field(
        ..., example='https://github.com/orgs/github/packages/container/package/super-linter'
    )
    html_url: Optional[str] = Field(
        None, example='https://github.com/orgs/github/packages/container/super-linter/786068'
    )
    license: Optional[str] = Field(None, example='MIT')
    description: Optional[str] = None
    created_at: datetime = Field(..., example='2011-04-10T20:09:31Z')
    updated_at: datetime = Field(..., example='2014-03-03T18:58:10Z')
    deleted_at: Optional[datetime] = Field(None, example='2014-03-03T18:58:10Z')
    metadata: Optional[Metadata1] = Field(None, title='Package Version Metadata')


class OrganizationPermission(Enum):
    """
    The baseline permission that all organization members have on this project. Only present if owner is an organization.
    """

    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class Project(BaseModel):
    """
    Projects are a way to organize columns and cards of work.
    """

    owner_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/api-playground/projects-test'
    )
    url: AnyUrl = Field(..., example='https://api.github.com/projects/1002604')
    html_url: AnyUrl = Field(
        ..., example='https://github.com/api-playground/projects-test/projects/12'
    )
    columns_url: AnyUrl = Field(..., example='https://api.github.com/projects/1002604/columns')
    id: int = Field(..., example=1002604)
    node_id: str = Field(..., example='MDc6UHJvamVjdDEwMDI2MDQ=')
    name: str = Field(..., description='Name of the project', example='Week One Sprint')
    body: str = Field(
        ...,
        description='Body of the project',
        example='This project represents the sprint of the first week in January',
    )
    number: int = Field(..., example=1)
    state: str = Field(
        ..., description="State of the project; either 'open' or 'closed'", example='open'
    )
    creator: NullableSimpleUser
    created_at: datetime = Field(..., example='2011-04-10T20:09:31Z')
    updated_at: datetime = Field(..., example='2014-03-03T18:58:10Z')
    organization_permission: Optional[OrganizationPermission] = Field(
        None,
        description='The baseline permission that all organization members have on this project. Only present if owner is an organization.',
    )
    private: Optional[bool] = Field(
        None,
        description='Whether or not this project can be seen by everyone. Only present if owner is an organization.',
    )


class Group1(BaseModel):
    group_id: str = Field(
        ..., description='The ID of the group', example='111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa'
    )
    group_name: str = Field(..., description='The name of the group', example='saml-azuread-test')
    group_description: str = Field(
        ...,
        description='a description of the group',
        example='A group of Developers working on AzureAD SAML SSO',
    )
    status: Optional[str] = Field(
        None, description='synchronization status for this group mapping', example='unsynced'
    )
    synced_at: Optional[str] = Field(
        None,
        description='the time of the last sync for this group-mapping',
        example='2019-06-03 22:27:15:000 -700',
    )


class GroupMapping(BaseModel):
    """
    External Groups to be mapped to a team for membership
    """

    groups: Optional[List[Group1]] = Field(
        None,
        description='Array of groups to be mapped to this team',
        example=[
            {
                'group_id': '111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa',
                'group_name': 'saml-azuread-test',
                'group_description': 'A group of Developers working on AzureAD SAML SSO',
            },
            {
                'group_id': '2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2',
                'group_name': 'saml-azuread-test2',
                'group_description': 'Another group of Developers working on AzureAD SAML SSO',
            },
        ],
    )


class Privacy(Enum):
    """
    The level of privacy this team should have
    """

    closed = 'closed'
    secret = 'secret'


class TeamFull(BaseModel):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    id: int = Field(..., description='Unique identifier of the team', example=42)
    node_id: str = Field(..., example='MDQ6VGVhbTE=')
    url: AnyUrl = Field(
        ..., description='URL for the team', example='https://api.github.com/organizations/1/team/1'
    )
    html_url: AnyUrl = Field(..., example='https://github.com/orgs/rails/teams/core')
    name: str = Field(..., description='Name of the team', example='Developers')
    slug: str = Field(..., example='justice-league')
    description: str = Field(..., example='A great team.')
    privacy: Optional[Privacy] = Field(
        None, description='The level of privacy this team should have', example='closed'
    )
    permission: str = Field(
        ..., description='Permission that the team will have for its repositories', example='push'
    )
    members_url: str = Field(
        ..., example='https://api.github.com/organizations/1/team/1/members{/member}'
    )
    repositories_url: AnyUrl = Field(
        ..., example='https://api.github.com/organizations/1/team/1/repos'
    )
    parent: Optional[NullableTeamSimple] = None
    members_count: int = Field(..., example=3)
    repos_count: int = Field(..., example=10)
    created_at: datetime = Field(..., example='2017-07-14T16:53:42Z')
    updated_at: datetime = Field(..., example='2017-08-17T12:37:15Z')
    organization: OrganizationFull
    ldap_dn: Optional[str] = Field(
        None,
        description='Distinguished Name (DN) that team maps to within LDAP environment',
        example='uid=example,ou=users,dc=github,dc=com',
    )


class TeamDiscussion(BaseModel):
    """
    A team discussion is a persistent record of a free-form conversation within a team.
    """

    author: NullableSimpleUser
    body: str = Field(
        ...,
        description='The main text of the discussion.',
        example='Please suggest improvements to our workflow in comments.',
    )
    body_html: str = Field(
        ..., example='<p>Hi! This is an area for us to collaborate as a team</p>'
    )
    body_version: str = Field(
        ...,
        description='The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.',
        example='0307116bbf7ced493b8d8a346c650b71',
    )
    comments_count: int = Field(..., example=0)
    comments_url: AnyUrl = Field(
        ..., example='https://api.github.com/organizations/1/team/2343027/discussions/1/comments'
    )
    created_at: datetime = Field(..., example='2018-01-25T18:56:31Z')
    last_edited_at: datetime
    html_url: AnyUrl = Field(
        ..., example='https://github.com/orgs/github/teams/justice-league/discussions/1'
    )
    node_id: str = Field(..., example='MDE0OlRlYW1EaXNjdXNzaW9uMQ==')
    number: int = Field(
        ..., description='The unique sequence number of a team discussion.', example=42
    )
    pinned: bool = Field(
        ...,
        description='Whether or not this discussion should be pinned for easy retrieval.',
        example=True,
    )
    private: bool = Field(
        ...,
        description='Whether or not this discussion should be restricted to team members and organization administrators.',
        example=True,
    )
    team_url: AnyUrl = Field(..., example='https://api.github.com/organizations/1/team/2343027')
    title: str = Field(
        ..., description='The title of the discussion.', example='How can we improve our workflow?'
    )
    updated_at: datetime = Field(..., example='2018-01-25T18:56:31Z')
    url: AnyUrl = Field(
        ..., example='https://api.github.com/organizations/1/team/2343027/discussions/1'
    )
    reactions: Optional[ReactionRollup] = None


class TeamDiscussionComment(BaseModel):
    """
    A reply to a discussion within a team.
    """

    author: NullableSimpleUser
    body: str = Field(
        ..., description='The main text of the comment.', example='I agree with this suggestion.'
    )
    body_html: str = Field(..., example='<p>Do you like apples?</p>')
    body_version: str = Field(
        ...,
        description='The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.',
        example='0307116bbf7ced493b8d8a346c650b71',
    )
    created_at: datetime = Field(..., example='2018-01-15T23:53:58Z')
    last_edited_at: datetime
    discussion_url: AnyUrl = Field(
        ..., example='https://api.github.com/organizations/1/team/2403582/discussions/1'
    )
    html_url: AnyUrl = Field(
        ..., example='https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1'
    )
    node_id: str = Field(..., example='MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=')
    number: int = Field(
        ..., description='The unique sequence number of a team discussion comment.', example=42
    )
    updated_at: datetime = Field(..., example='2018-01-15T23:53:58Z')
    url: AnyUrl = Field(
        ..., example='https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1'
    )
    reactions: Optional[ReactionRollup] = None


class Content(Enum):
    """
    The reaction to use
    """

    _1 = '+1'
    _1_1 = '-1'
    laugh = 'laugh'
    confused = 'confused'
    heart = 'heart'
    hooray = 'hooray'
    rocket = 'rocket'
    eyes = 'eyes'


class Reaction(BaseModel):
    """
    Reactions to conversations provide a way to help people express their feelings more simply and effectively.
    """

    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDg6UmVhY3Rpb24x')
    user: NullableSimpleUser
    content: Content = Field(..., description='The reaction to use', example='heart')
    created_at: datetime = Field(..., example='2016-05-20T20:09:31Z')


class Role1(Enum):
    """
    The role of the user in the team.
    """

    member = 'member'
    maintainer = 'maintainer'


class TeamMembership(BaseModel):
    """
    Team Membership
    """

    url: AnyUrl
    role: Optional[Role1] = Field(
        'member', description='The role of the user in the team.', example='member'
    )
    state: State1 = Field(..., description="The state of the user's membership in the team.")


class Permissions10(BaseModel):
    read: bool
    write: bool
    admin: bool


class TeamProject(BaseModel):
    """
    A team's access to a project.
    """

    owner_url: str
    url: str
    html_url: str
    columns_url: str
    id: int
    node_id: str
    name: str
    body: str
    number: int
    state: str
    creator: SimpleUser
    created_at: str
    updated_at: str
    organization_permission: Optional[str] = Field(
        None,
        description='The organization permission for this project. Only present when owner is an organization.',
    )
    private: Optional[bool] = Field(
        None,
        description='Whether the project is private or not. Only present when owner is an organization.',
    )
    permissions: Permissions10


class Permissions11(Permissions1):
    pass


class TeamRepository(BaseModel):
    """
    A team's access to a repository.
    """

    id: int = Field(..., description='Unique identifier of the repository', example=42)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., description='The name of the repository.', example='Team Environment')
    full_name: str = Field(..., example='octocat/Hello-World')
    license: NullableLicenseSimple
    forks: int
    permissions: Optional[Permissions11] = None
    role_name: Optional[str] = Field(None, example='admin')
    owner: NullableSimpleUser
    private: Optional[bool] = Field(
        False, description='Whether the repository is private or public.'
    )
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World')
    description: str = Field(..., example='This your first repo!')
    fork: bool
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World')
    archive_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
    )
    assignees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/assignees{/user}'
    )
    blobs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'
    )
    branches_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/branches{/branch}'
    )
    collaborators_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
    )
    comments_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/comments{/number}'
    )
    commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/commits{/sha}'
    )
    compare_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
    )
    contents_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contents/{+path}'
    )
    contributors_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contributors'
    )
    deployments_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/deployments'
    )
    downloads_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/downloads'
    )
    events_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/events'
    )
    forks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/forks')
    git_commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'
    )
    git_refs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}'
    )
    git_tags_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}'
    )
    git_url: str = Field(..., example='git:github.com/octocat/Hello-World.git')
    issue_comment_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
    )
    issue_events_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
    )
    issues_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues{/number}'
    )
    keys_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/keys{/key_id}'
    )
    labels_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/labels{/name}'
    )
    languages_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/languages'
    )
    merges_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/merges'
    )
    milestones_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
    )
    notifications_url: str = Field(
        ...,
        example='http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    )
    pulls_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/pulls{/number}'
    )
    releases_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/releases{/id}'
    )
    ssh_url: str = Field(..., example='git@github.com:octocat/Hello-World.git')
    stargazers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/stargazers'
    )
    statuses_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/statuses/{sha}'
    )
    subscribers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscribers'
    )
    subscription_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscription'
    )
    tags_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/tags')
    teams_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/teams')
    trees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'
    )
    clone_url: str = Field(..., example='https://github.com/octocat/Hello-World.git')
    mirror_url: AnyUrl = Field(..., example='git:git.example.com/octocat/Hello-World')
    hooks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/hooks')
    svn_url: AnyUrl = Field(..., example='https://svn.github.com/octocat/Hello-World')
    homepage: AnyUrl = Field(..., example='https://github.com')
    language: str
    forks_count: int = Field(..., example=9)
    stargazers_count: int = Field(..., example=80)
    watchers_count: int = Field(..., example=80)
    size: int = Field(..., example=108)
    default_branch: str = Field(
        ..., description='The default branch of the repository.', example='master'
    )
    open_issues_count: int = Field(..., example=0)
    is_template: Optional[bool] = Field(
        False,
        description='Whether this repository acts as a template that can be used to generate new repositories.',
        example=True,
    )
    topics: Optional[List[str]] = None
    has_issues: Optional[bool] = Field(
        True, description='Whether issues are enabled.', example=True
    )
    has_projects: Optional[bool] = Field(
        True, description='Whether projects are enabled.', example=True
    )
    has_wiki: Optional[bool] = Field(True, description='Whether the wiki is enabled.', example=True)
    has_pages: bool
    has_downloads: Optional[bool] = Field(
        True, description='Whether downloads are enabled.', example=True
    )
    archived: Optional[bool] = Field(False, description='Whether the repository is archived.')
    disabled: bool = Field(..., description='Returns whether or not this repository disabled.')
    visibility: Optional[str] = Field(
        'public', description='The repository visibility: public, private, or internal.'
    )
    pushed_at: datetime = Field(..., example='2011-01-26T19:06:43Z')
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:14:43Z')
    allow_rebase_merge: Optional[bool] = Field(
        True, description='Whether to allow rebase merges for pull requests.', example=True
    )
    template_repository: Optional[NullableRepository] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(
        True, description='Whether to allow squash merges for pull requests.', example=True
    )
    allow_auto_merge: Optional[bool] = Field(
        False, description='Whether to allow Auto-merge to be used on pull requests.', example=False
    )
    delete_branch_on_merge: Optional[bool] = Field(
        False,
        description='Whether to delete head branches when pull requests are merged',
        example=False,
    )
    allow_merge_commit: Optional[bool] = Field(
        True, description='Whether to allow merge commits for pull requests.', example=True
    )
    allow_forking: Optional[bool] = Field(
        False, description='Whether to allow forking this repo', example=False
    )
    subscribers_count: Optional[int] = None
    network_count: Optional[int] = None
    open_issues: int
    watchers: int
    master_branch: Optional[str] = None


class ProjectCard(BaseModel):
    """
    Project cards represent a scope of work.
    """

    url: AnyUrl = Field(..., example='https://api.github.com/projects/columns/cards/1478')
    id: int = Field(..., description="The project card's ID", example=42)
    node_id: str = Field(..., example='MDExOlByb2plY3RDYXJkMTQ3OA==')
    note: str = Field(..., example='Add payload for delete Project column')
    creator: NullableSimpleUser
    created_at: datetime = Field(..., example='2016-09-05T14:21:06Z')
    updated_at: datetime = Field(..., example='2016-09-05T14:20:22Z')
    archived: Optional[bool] = Field(
        None, description='Whether or not the card is archived', example=False
    )
    column_name: Optional[str] = None
    project_id: Optional[str] = None
    column_url: AnyUrl = Field(..., example='https://api.github.com/projects/columns/367')
    content_url: Optional[AnyUrl] = Field(
        None, example='https://api.github.com/repos/api-playground/projects-test/issues/3'
    )
    project_url: AnyUrl = Field(..., example='https://api.github.com/projects/120')


class ProjectColumn(BaseModel):
    """
    Project columns contain cards of work.
    """

    url: AnyUrl = Field(..., example='https://api.github.com/projects/columns/367')
    project_url: AnyUrl = Field(..., example='https://api.github.com/projects/120')
    cards_url: AnyUrl = Field(..., example='https://api.github.com/projects/columns/367/cards')
    id: int = Field(..., description='The unique identifier of the project column', example=42)
    node_id: str = Field(..., example='MDEzOlByb2plY3RDb2x1bW4zNjc=')
    name: str = Field(..., description='Name of the project column', example='Remaining tasks')
    created_at: datetime = Field(..., example='2016-09-05T14:18:44Z')
    updated_at: datetime = Field(..., example='2016-09-05T14:22:28Z')


class ProjectCollaboratorPermission(BaseModel):
    """
    Project Collaborator Permission
    """

    permission: str
    user: NullableSimpleUser


class RateLimit(BaseModel):
    limit: int
    remaining: int
    reset: int
    used: int


class Resources(BaseModel):
    core: RateLimit
    graphql: Optional[RateLimit] = None
    search: RateLimit
    source_import: Optional[RateLimit] = None
    integration_manifest: Optional[RateLimit] = None
    code_scanning_upload: Optional[RateLimit] = None
    actions_runner_registration: Optional[RateLimit] = None
    scim: Optional[RateLimit] = None


class RateLimitOverview(BaseModel):
    """
    Rate Limit Overview
    """

    resources: Resources
    rate: RateLimit


class CodeOfConductSimple(BaseModel):
    """
    Code of Conduct Simple
    """

    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/github/docs/community/code_of_conduct'
    )
    key: str = Field(..., example='citizen_code_of_conduct')
    name: str = Field(..., example='Citizen Code of Conduct')
    html_url: AnyUrl = Field(
        ..., example='https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md'
    )


class Permissions12(BaseModel):
    admin: bool
    maintain: Optional[bool] = None
    push: bool
    triage: Optional[bool] = None
    pull: bool


class Status(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class AdvancedSecurity(BaseModel):
    status: Optional[Status] = None


class SecretScanning(AdvancedSecurity):
    pass


class SecurityAndAnalysis(BaseModel):
    advanced_security: Optional[AdvancedSecurity] = None
    secret_scanning: Optional[SecretScanning] = None


class FullRepository(BaseModel):
    """
    Full Repository
    """

    id: int = Field(..., example=1296269)
    node_id: str = Field(..., example='MDEwOlJlcG9zaXRvcnkxMjk2MjY5')
    name: str = Field(..., example='Hello-World')
    full_name: str = Field(..., example='octocat/Hello-World')
    owner: SimpleUser
    private: bool
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World')
    description: str = Field(..., example='This your first repo!')
    fork: bool
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World')
    archive_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}'
    )
    assignees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/assignees{/user}'
    )
    blobs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}'
    )
    branches_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/branches{/branch}'
    )
    collaborators_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}'
    )
    comments_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/comments{/number}'
    )
    commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/commits{/sha}'
    )
    compare_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}'
    )
    contents_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contents/{+path}'
    )
    contributors_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/contributors'
    )
    deployments_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/deployments'
    )
    downloads_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/downloads'
    )
    events_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/events'
    )
    forks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/forks')
    git_commits_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}'
    )
    git_refs_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}'
    )
    git_tags_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}'
    )
    git_url: str = Field(..., example='git:github.com/octocat/Hello-World.git')
    issue_comment_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}'
    )
    issue_events_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues/events{/number}'
    )
    issues_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/issues{/number}'
    )
    keys_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/keys{/key_id}'
    )
    labels_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/labels{/name}'
    )
    languages_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/languages'
    )
    merges_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/merges'
    )
    milestones_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/milestones{/number}'
    )
    notifications_url: str = Field(
        ...,
        example='http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}',
    )
    pulls_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/pulls{/number}'
    )
    releases_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/releases{/id}'
    )
    ssh_url: str = Field(..., example='git@github.com:octocat/Hello-World.git')
    stargazers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/stargazers'
    )
    statuses_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/statuses/{sha}'
    )
    subscribers_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscribers'
    )
    subscription_url: AnyUrl = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/subscription'
    )
    tags_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/tags')
    teams_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/teams')
    trees_url: str = Field(
        ..., example='http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}'
    )
    clone_url: str = Field(..., example='https://github.com/octocat/Hello-World.git')
    mirror_url: AnyUrl = Field(..., example='git:git.example.com/octocat/Hello-World')
    hooks_url: AnyUrl = Field(..., example='http://api.github.com/repos/octocat/Hello-World/hooks')
    svn_url: AnyUrl = Field(..., example='https://svn.github.com/octocat/Hello-World')
    homepage: AnyUrl = Field(..., example='https://github.com')
    language: str
    forks_count: int = Field(..., example=9)
    stargazers_count: int = Field(..., example=80)
    watchers_count: int = Field(..., example=80)
    size: int = Field(..., example=108)
    default_branch: str = Field(..., example='master')
    open_issues_count: int = Field(..., example=0)
    is_template: Optional[bool] = Field(None, example=True)
    topics: Optional[List[str]] = Field(None, example=['octocat', 'atom', 'electron', 'API'])
    has_issues: bool = Field(..., example=True)
    has_projects: bool = Field(..., example=True)
    has_wiki: bool = Field(..., example=True)
    has_pages: bool
    has_downloads: bool = Field(..., example=True)
    archived: bool
    disabled: bool = Field(..., description='Returns whether or not this repository disabled.')
    visibility: Optional[str] = Field(
        None,
        description='The repository visibility: public, private, or internal.',
        example='public',
    )
    pushed_at: datetime = Field(..., example='2011-01-26T19:06:43Z')
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:14:43Z')
    permissions: Optional[Permissions12] = None
    allow_rebase_merge: Optional[bool] = Field(None, example=True)
    template_repository: Optional[NullableRepository] = None
    temp_clone_token: Optional[str] = None
    allow_squash_merge: Optional[bool] = Field(None, example=True)
    allow_auto_merge: Optional[bool] = Field(None, example=False)
    delete_branch_on_merge: Optional[bool] = Field(None, example=False)
    allow_merge_commit: Optional[bool] = Field(None, example=True)
    allow_forking: Optional[bool] = Field(None, example=True)
    subscribers_count: int = Field(..., example=42)
    network_count: int = Field(..., example=0)
    license: NullableLicenseSimple
    organization: Optional[NullableSimpleUser] = None
    parent: Optional[Repository] = None
    source: Optional[Repository] = None
    forks: int
    master_branch: Optional[str] = None
    open_issues: int
    watchers: int
    anonymous_access_enabled: Optional[bool] = Field(
        True, description='Whether anonymous git access is allowed.'
    )
    code_of_conduct: Optional[CodeOfConductSimple] = None
    security_and_analysis: Optional[SecurityAndAnalysis] = None


class Artifact(BaseModel):
    """
    An artifact
    """

    id: int = Field(..., example=5)
    node_id: str = Field(..., example='MDEwOkNoZWNrU3VpdGU1')
    name: str = Field(
        ..., description='The name of the artifact.', example='AdventureWorks.Framework'
    )
    size_in_bytes: int = Field(..., description='The size in bytes of the artifact.', example=12345)
    url: str = Field(
        ..., example='https://api.github.com/repos/github/hello-world/actions/artifacts/5'
    )
    archive_download_url: str = Field(
        ..., example='https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip'
    )
    expired: bool = Field(..., description='Whether or not the artifact has expired.')
    created_at: datetime
    expires_at: datetime
    updated_at: datetime


class Status2(Enum):
    """
    The phase of the lifecycle that the job is currently in.
    """

    queued = 'queued'
    in_progress = 'in_progress'
    completed = 'completed'


class Step(BaseModel):
    status: Status2 = Field(
        ...,
        description='The phase of the lifecycle that the job is currently in.',
        example='queued',
    )
    conclusion: str = Field(..., description='The outcome of the job.', example='success')
    name: str = Field(..., description='The name of the job.', example='test-coverage')
    number: int = Field(..., example=1)
    started_at: Optional[datetime] = Field(
        None,
        description='The time that the step started, in ISO 8601 format.',
        example='2019-08-08T08:00:00-07:00',
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='The time that the job finished, in ISO 8601 format.',
        example='2019-08-08T08:00:00-07:00',
    )


class Job(BaseModel):
    """
    Information of a job execution in a workflow run
    """

    id: int = Field(..., description='The id of the job.', example=21)
    run_id: int = Field(..., description='The id of the associated workflow run.', example=5)
    run_url: str = Field(
        ..., example='https://api.github.com/repos/github/hello-world/actions/runs/5'
    )
    run_attempt: Optional[int] = Field(
        None,
        description='Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.',
        example=1,
    )
    node_id: str = Field(..., example='MDg6Q2hlY2tSdW40')
    head_sha: str = Field(
        ...,
        description='The SHA of the commit that is being run.',
        example='009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    )
    url: str = Field(..., example='https://api.github.com/repos/github/hello-world/actions/jobs/21')
    html_url: str = Field(..., example='https://github.com/github/hello-world/runs/4')
    status: Status2 = Field(
        ...,
        description='The phase of the lifecycle that the job is currently in.',
        example='queued',
    )
    conclusion: str = Field(..., description='The outcome of the job.', example='success')
    started_at: datetime = Field(
        ...,
        description='The time that the job started, in ISO 8601 format.',
        example='2019-08-08T08:00:00-07:00',
    )
    completed_at: datetime = Field(
        ...,
        description='The time that the job finished, in ISO 8601 format.',
        example='2019-08-08T08:00:00-07:00',
    )
    name: str = Field(..., description='The name of the job.', example='test-coverage')
    steps: Optional[List[Step]] = Field(None, description='Steps in this job.')
    check_run_url: str = Field(
        ..., example='https://api.github.com/repos/github/hello-world/check-runs/4'
    )
    labels: List[str] = Field(
        ...,
        description='Labels for the workflow job. Specified by the "runs_on" attribute in the action\'s workflow file.',
        example=['self-hosted', 'foo', 'bar'],
    )
    runner_id: int = Field(
        ...,
        description="The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        example=1,
    )
    runner_name: str = Field(
        ...,
        description="The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        example='my runner',
    )
    runner_group_id: int = Field(
        ...,
        description="The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        example=2,
    )
    runner_group_name: str = Field(
        ...,
        description="The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
        example='my runner group',
    )


class ActionsEnabled(BaseModel):
    __root__: bool = Field(..., description='Whether GitHub Actions is enabled on the repository.')


class ActionsRepositoryPermissions(BaseModel):
    enabled: ActionsEnabled
    allowed_actions: Optional[AllowedActions] = None
    selected_actions_url: Optional[SelectedActionsUrl] = None


class AccessLevel(Enum):
    """
        Defines the level of access that workflows outside of the repository have to actions and workflows within the
    repository. `none` means access is only possible from workflows in this repository. Can be one of `none`, `organization`, `enterprise`.
    """

    none = 'none'
    organization = 'organization'
    enterprise = 'enterprise'


class ActionsWorkflowAccessToRepository(BaseModel):
    access_level: AccessLevel = Field(
        ...,
        description='Defines the level of access that workflows outside of the repository have to actions and workflows within the\nrepository. `none` means access is only possible from workflows in this repository. Can be one of `none`, `organization`, `enterprise`.',
    )


class Repo1(BaseModel):
    id: int
    url: str
    name: str


class Head(BaseModel):
    ref: str
    sha: str
    repo: Repo1


class Repo2(Repo1):
    pass


class Base(BaseModel):
    ref: str
    sha: str
    repo: Repo2


class PullRequestMinimal(BaseModel):
    id: int
    number: int
    url: str
    head: Head
    base: Base


class Author(BaseModel):
    name: str
    email: str


class Committer(Author):
    pass


class NullableSimpleCommit(BaseModel):
    """
    Simple Commit
    """

    id: str
    tree_id: str
    message: str
    timestamp: datetime
    author: Author
    committer: Committer


class WorkflowRun(BaseModel):
    """
    An invocation of a workflow
    """

    id: int = Field(..., description='The ID of the workflow run.', example=5)
    name: Optional[str] = Field(None, description='The name of the workflow run.', example='Build')
    node_id: str = Field(..., example='MDEwOkNoZWNrU3VpdGU1')
    check_suite_id: Optional[int] = Field(
        None, description='The ID of the associated check suite.', example=42
    )
    check_suite_node_id: Optional[str] = Field(
        None,
        description='The node ID of the associated check suite.',
        example='MDEwOkNoZWNrU3VpdGU0Mg==',
    )
    head_branch: str = Field(..., example='master')
    head_sha: str = Field(
        ...,
        description='The SHA of the head commit that points to the version of the workflow being run.',
        example='009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    )
    run_number: int = Field(
        ..., description='The auto incrementing run number for the workflow run.', example=106
    )
    run_attempt: Optional[int] = Field(
        None,
        description='Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.',
        example=1,
    )
    event: str = Field(..., example='push')
    status: str = Field(..., example='completed')
    conclusion: str = Field(..., example='neutral')
    workflow_id: int = Field(..., description='The ID of the parent workflow.', example=5)
    url: str = Field(
        ...,
        description='The URL to the workflow run.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5',
    )
    html_url: str = Field(..., example='https://github.com/github/hello-world/suites/4')
    pull_requests: List[PullRequestMinimal]
    created_at: datetime
    updated_at: datetime
    actor: Optional[SimpleUser] = None
    run_started_at: Optional[datetime] = Field(
        None, description='The start time of the latest run. Resets on re-run.'
    )
    jobs_url: str = Field(
        ...,
        description='The URL to the jobs for the workflow run.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5/jobs',
    )
    logs_url: str = Field(
        ...,
        description='The URL to download the logs for the workflow run.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5/logs',
    )
    check_suite_url: str = Field(
        ...,
        description='The URL to the associated check suite.',
        example='https://api.github.com/repos/github/hello-world/check-suites/12',
    )
    artifacts_url: str = Field(
        ...,
        description='The URL to the artifacts for the workflow run.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts',
    )
    cancel_url: str = Field(
        ...,
        description='The URL to cancel the workflow run.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5/cancel',
    )
    rerun_url: str = Field(
        ...,
        description='The URL to rerun the workflow run.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5/rerun',
    )
    previous_attempt_url: Optional[str] = Field(
        None,
        description='The URL to the previous attempted run of this workflow, if one exists.',
        example='https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3',
    )
    workflow_url: str = Field(
        ...,
        description='The URL to the workflow.',
        example='https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml',
    )
    head_commit: NullableSimpleCommit
    repository: MinimalRepository
    head_repository: MinimalRepository
    head_repository_id: Optional[int] = Field(None, example=5)


class Environment(BaseModel):
    id: Optional[int] = Field(None, description='The id of the environment.', example=56780428)
    node_id: Optional[str] = Field(None, example='MDExOkVudmlyb25tZW50NTY3ODA0Mjg=')
    name: Optional[str] = Field(None, description='The name of the environment.', example='staging')
    url: Optional[str] = Field(
        None, example='https://api.github.com/repos/github/hello-world/environments/staging'
    )
    html_url: Optional[str] = Field(
        None,
        example='https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
    )
    created_at: Optional[datetime] = Field(
        None,
        description='The time that the environment was created, in ISO 8601 format.',
        example='2020-11-23T22:00:40Z',
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='The time that the environment was last updated, in ISO 8601 format.',
        example='2020-11-23T22:00:40Z',
    )


class State3(Enum):
    """
    Whether deployment to the environment(s) was approved or rejected
    """

    approved = 'approved'
    rejected = 'rejected'


class EnvironmentApprovals(BaseModel):
    """
    An entry in the reviews log for environment deployments
    """

    environments: List[Environment] = Field(
        ..., description='The list of environments that were approved or rejected'
    )
    state: State3 = Field(
        ...,
        description='Whether deployment to the environment(s) was approved or rejected',
        example='approved',
    )
    user: SimpleUser
    comment: str = Field(
        ..., description='The comment submitted with the deployment review', example='Ship it!'
    )


class DeploymentReviewerType(Enum):
    """
    The type of reviewer. Must be one of: `User` or `Team`
    """

    user = 'User'
    team = 'Team'


class Environment1(BaseModel):
    id: Optional[int] = Field(None, description='The id of the environment.', example=56780428)
    node_id: Optional[str] = Field(None, example='MDExOkVudmlyb25tZW50NTY3ODA0Mjg=')
    name: Optional[str] = Field(None, description='The name of the environment.', example='staging')
    url: Optional[str] = Field(
        None, example='https://api.github.com/repos/github/hello-world/environments/staging'
    )
    html_url: Optional[str] = Field(
        None,
        example='https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
    )


class Reviewer(BaseModel):
    type: Optional[DeploymentReviewerType] = None
    reviewer: Optional[Union[SimpleUser, Team1]] = None


class PendingDeployment(BaseModel):
    """
    Details of a deployment that is waiting for protection rules to pass
    """

    environment: Environment1
    wait_timer: int = Field(..., description='The set duration of the wait timer', example=30)
    wait_timer_started_at: datetime = Field(
        ..., description='The time that the wait timer began.', example='2020-11-23T22:00:40Z'
    )
    current_user_can_approve: bool = Field(
        ...,
        description='Whether the currently authenticated user can approve the deployment',
        example=True,
    )
    reviewers: List[Reviewer] = Field(
        ...,
        description='The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.',
    )


class Deployment(BaseModel):
    """
    A request for a specific ref(branch,sha,tag) to be deployed
    """

    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example/deployments/1')
    id: int = Field(..., description='Unique identifier of the deployment', example=42)
    node_id: str = Field(..., example='MDEwOkRlcGxveW1lbnQx')
    sha: str = Field(..., example='a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d')
    ref: str = Field(
        ...,
        description='The ref to deploy. This can be a branch, tag, or sha.',
        example='topic-branch',
    )
    task: str = Field(..., description='Parameter to specify a task to execute', example='deploy')
    payload: Union[Dict[str, Any], str]
    original_environment: Optional[str] = Field(None, example='staging')
    environment: str = Field(
        ..., description='Name for the target deployment environment.', example='production'
    )
    description: str = Field(..., example='Deploy request from hubot')
    creator: NullableSimpleUser
    created_at: datetime = Field(..., example='2012-07-20T01:19:13Z')
    updated_at: datetime = Field(..., example='2012-07-20T01:19:13Z')
    statuses_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/example/deployments/1/statuses'
    )
    repository_url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example')
    transient_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is will no longer exist at some point in the future. Default: false.',
        example=True,
    )
    production_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is one that end-users directly interact with. Default: false.',
        example=True,
    )
    performed_via_github_app: Optional[NullableIntegration] = None


class JobRun(BaseModel):
    job_id: int
    duration_ms: int


class Ubuntu(BaseModel):
    total_ms: int
    jobs: int
    job_runs: Optional[List[JobRun]] = None


class JobRun1(JobRun):
    pass


class Macos(BaseModel):
    total_ms: int
    jobs: int
    job_runs: Optional[List[JobRun1]] = None


class JobRun2(JobRun):
    pass


class Windows(BaseModel):
    total_ms: int
    jobs: int
    job_runs: Optional[List[JobRun2]] = None


class Billable(BaseModel):
    ubuntu: Optional[Ubuntu] = Field(None, alias='UBUNTU')
    macos: Optional[Macos] = Field(None, alias='MACOS')
    windows: Optional[Windows] = Field(None, alias='WINDOWS')


class WorkflowRunUsage(BaseModel):
    """
    Workflow Run Usage
    """

    billable: Billable
    run_duration_ms: Optional[int] = None


class ActionsSecret(BaseModel):
    """
    Set secrets for GitHub Actions.
    """

    name: str = Field(..., description='The name of the secret.', example='SECRET_TOKEN')
    created_at: datetime
    updated_at: datetime


class State4(Enum):
    active = 'active'
    deleted = 'deleted'
    disabled_fork = 'disabled_fork'
    disabled_inactivity = 'disabled_inactivity'
    disabled_manually = 'disabled_manually'


class Workflow(BaseModel):
    """
    A GitHub Actions workflow
    """

    id: int = Field(..., example=5)
    node_id: str = Field(..., example='MDg6V29ya2Zsb3cxMg==')
    name: str = Field(..., example='CI')
    path: str = Field(..., example='ruby.yaml')
    state: State4 = Field(..., example='active')
    created_at: datetime = Field(..., example='2019-12-06T14:20:20.000Z')
    updated_at: datetime = Field(..., example='2019-12-06T14:20:20.000Z')
    url: str = Field(..., example='https://api.github.com/repos/actions/setup-ruby/workflows/5')
    html_url: str = Field(
        ..., example='https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml'
    )
    badge_url: str = Field(
        ..., example='https://github.com/actions/setup-ruby/workflows/CI/badge.svg'
    )
    deleted_at: Optional[datetime] = Field(None, example='2019-12-06T14:20:20.000Z')


class Ubuntu1(BaseModel):
    total_ms: Optional[int] = None


class Macos1(Ubuntu1):
    pass


class Windows1(Ubuntu1):
    pass


class Billable1(BaseModel):
    ubuntu: Optional[Ubuntu1] = Field(None, alias='UBUNTU')
    macos: Optional[Macos1] = Field(None, alias='MACOS')
    windows: Optional[Windows1] = Field(None, alias='WINDOWS')


class WorkflowUsage(BaseModel):
    """
    Workflow Usage
    """

    billable: Billable1


class Autolink(BaseModel):
    """
    An autolink reference.
    """

    id: int = Field(..., example=3)
    key_prefix: str = Field(
        ..., description='The prefix of a key that is linkified.', example='TICKET-'
    )
    url_template: str = Field(
        ...,
        description='A template for the target URL that is generated if a key was found.',
        example='https://example.com/TICKET?query=<num>',
    )


class Check(BaseModel):
    context: str
    app_id: int


class ProtectedBranchRequiredStatusCheck(BaseModel):
    """
    Protected Branch Required Status Check
    """

    url: Optional[str] = None
    enforcement_level: Optional[str] = None
    contexts: List[str]
    checks: List[Check]
    contexts_url: Optional[str] = None
    strict: Optional[bool] = None


class ProtectedBranchAdminEnforced(BaseModel):
    """
    Protected Branch Admin Enforced
    """

    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins',
    )
    enabled: bool = Field(..., example=True)


class DismissalRestrictions(BaseModel):
    users: Optional[List[SimpleUser]] = Field(
        None, description='The list of users with review dismissal access.'
    )
    teams: Optional[List[Team1]] = Field(
        None, description='The list of teams with review dismissal access.'
    )
    url: Optional[str] = Field(
        None,
        example='"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"',
    )
    users_url: Optional[str] = Field(
        None,
        example='"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"',
    )
    teams_url: Optional[str] = Field(
        None,
        example='"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"',
    )


class BypassPullRequestAllowances(BaseModel):
    """
    Allow specific users or teams to bypass pull request requirements.
    """

    users: Optional[List[SimpleUser]] = Field(
        None, description='The list of users allowed to bypass pull request requirements.'
    )
    teams: Optional[List[Team1]] = Field(
        None, description='The list of teams allowed to bypass pull request requirements.'
    )


class ProtectedBranchPullRequestReview(BaseModel):
    """
    Protected Branch Pull Request Review
    """

    url: Optional[AnyUrl] = Field(
        None,
        example='https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions',
    )
    dismissal_restrictions: Optional[DismissalRestrictions] = None
    bypass_pull_request_allowances: Optional[BypassPullRequestAllowances] = Field(
        None, description='Allow specific users or teams to bypass pull request requirements.'
    )
    dismiss_stale_reviews: bool = Field(..., example=True)
    require_code_owner_reviews: bool = Field(..., example=True)
    required_approving_review_count: Optional[conint(ge=0, le=6)] = Field(None, example=2)


class User(Owner):
    pass


class Team2(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    name: Optional[str] = None
    slug: Optional[str] = None
    description: Optional[str] = None
    privacy: Optional[str] = None
    permission: Optional[str] = None
    members_url: Optional[str] = None
    repositories_url: Optional[str] = None
    parent: Optional[str] = None


class Owner2(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    hooks_url: Optional[str] = None
    issues_url: Optional[str] = None
    members_url: Optional[str] = None
    public_members_url: Optional[str] = None
    avatar_url: Optional[str] = None
    description: Optional[str] = None
    gravatar_id: Optional[str] = Field(None, example='""')
    html_url: Optional[str] = Field(None, example='"https://github.com/testorg-ea8ec76d71c3af4b"')
    followers_url: Optional[str] = Field(
        None, example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"'
    )
    following_url: Optional[str] = Field(
        None,
        example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"',
    )
    gists_url: Optional[str] = Field(
        None, example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"'
    )
    starred_url: Optional[str] = Field(
        None,
        example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"',
    )
    subscriptions_url: Optional[str] = Field(
        None, example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"'
    )
    organizations_url: Optional[str] = Field(
        None, example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"'
    )
    received_events_url: Optional[str] = Field(
        None, example='"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"'
    )
    type: Optional[str] = Field(None, example='"Organization"')
    site_admin: Optional[bool] = Field(None, example=False)


class Permissions13(BaseModel):
    metadata: Optional[str] = None
    contents: Optional[str] = None
    issues: Optional[str] = None
    single_file: Optional[str] = None


class App2(BaseModel):
    id: Optional[int] = None
    slug: Optional[str] = None
    node_id: Optional[str] = None
    owner: Optional[Owner2] = None
    name: Optional[str] = None
    description: Optional[str] = None
    external_url: Optional[str] = None
    html_url: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    permissions: Optional[Permissions13] = None
    events: Optional[List[str]] = None


class BranchRestrictionPolicy(BaseModel):
    """
    Branch Restriction Policy
    """

    url: AnyUrl
    users_url: AnyUrl
    teams_url: AnyUrl
    apps_url: AnyUrl
    users: List[User]
    teams: List[Team2]
    apps: List[App2]


class RequiredLinearHistory(BaseModel):
    enabled: Optional[bool] = None


class AllowForcePushes(RequiredLinearHistory):
    pass


class AllowDeletions(RequiredLinearHistory):
    pass


class RequiredConversationResolution(RequiredLinearHistory):
    pass


class RequiredSignatures(BaseModel):
    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures',
    )
    enabled: bool = Field(..., example=True)


class BranchProtection(BaseModel):
    """
    Branch Protection
    """

    url: Optional[str] = None
    enabled: Optional[bool] = None
    required_status_checks: Optional[ProtectedBranchRequiredStatusCheck] = None
    enforce_admins: Optional[ProtectedBranchAdminEnforced] = None
    required_pull_request_reviews: Optional[ProtectedBranchPullRequestReview] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    required_linear_history: Optional[RequiredLinearHistory] = None
    allow_force_pushes: Optional[AllowForcePushes] = None
    allow_deletions: Optional[AllowDeletions] = None
    required_conversation_resolution: Optional[RequiredConversationResolution] = None
    name: Optional[str] = Field(None, example='"branch/with/protection"')
    protection_url: Optional[str] = Field(
        None,
        example='"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"',
    )
    required_signatures: Optional[RequiredSignatures] = None


class Commit(BaseModel):
    sha: str
    url: AnyUrl


class ShortBranch(BaseModel):
    """
    Short Branch
    """

    name: str
    commit: Commit
    protected: bool
    protection: Optional[BranchProtection] = None
    protection_url: Optional[AnyUrl] = None


class NullableGitUser(BaseModel):
    """
    Metaproperties for Git author/committer information.
    """

    name: Optional[str] = Field(None, example='"Chris Wanstrath"')
    email: Optional[str] = Field(None, example='"chris@ozmm.org"')
    date: Optional[str] = Field(None, example='"2007-10-29T02:42:39.000-07:00"')


class Verification(BaseModel):
    verified: bool
    reason: str
    payload: str
    signature: str


class Status4(Enum):
    added = 'added'
    removed = 'removed'
    modified = 'modified'
    renamed = 'renamed'
    copied = 'copied'
    changed = 'changed'
    unchanged = 'unchanged'


class DiffEntry(BaseModel):
    """
    Diff Entry
    """

    sha: str = Field(..., example='bbcd538c8e72b8c175046e27cc8f907076331401')
    filename: str = Field(..., example='file1.txt')
    status: Status4 = Field(..., example='added')
    additions: int = Field(..., example=103)
    deletions: int = Field(..., example=21)
    changes: int = Field(..., example=124)
    blob_url: AnyUrl = Field(
        ...,
        example='https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
    )
    raw_url: AnyUrl = Field(
        ...,
        example='https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt',
    )
    contents_url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    patch: Optional[str] = Field(
        None, example='@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test'
    )
    previous_filename: Optional[str] = Field(None, example='file.txt')


class Tree(BaseModel):
    sha: str = Field(..., example='827efc6d56897b048c772eb4087f854f46256132')
    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132',
    )


class Commit2(BaseModel):
    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    author: NullableGitUser
    committer: NullableGitUser
    message: str = Field(..., example='Fix all the bugs')
    comment_count: int = Field(..., example=0)
    tree: Tree
    verification: Optional[Verification] = None


class Parent(BaseModel):
    sha: str = Field(..., example='7638417db6d59f3c431d3e1f261cc637155684cd')
    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
    )
    html_url: Optional[AnyUrl] = Field(
        None,
        example='https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd',
    )


class Stats(BaseModel):
    additions: Optional[int] = None
    deletions: Optional[int] = None
    total: Optional[int] = None


class Commit1(BaseModel):
    """
    Commit
    """

    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    sha: str = Field(..., example='6dcb09b5b57875f334f61aebed695e2e4193db5e')
    node_id: str = Field(
        ..., example='MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=='
    )
    html_url: AnyUrl = Field(
        ...,
        example='https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    comments_url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments',
    )
    commit: Commit2
    author: NullableSimpleUser
    committer: NullableSimpleUser
    parents: List[Parent]
    stats: Optional[Stats] = None
    files: Optional[List[DiffEntry]] = None


class _Links1(BaseModel):
    html: str
    self: AnyUrl


class BranchWithProtection(BaseModel):
    """
    Branch With Protection
    """

    name: str
    commit: Commit1
    _links: _Links1
    protected: bool
    protection: BranchProtection
    protection_url: AnyUrl
    pattern: Optional[str] = Field(None, example='"mas*"')
    required_approving_review_count: Optional[int] = Field(None, example=1)


class Check1(BaseModel):
    context: str = Field(..., example='continuous-integration/travis-ci')
    app_id: int


class StatusCheckPolicy(BaseModel):
    """
    Status Check Policy
    """

    url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks',
    )
    strict: bool = Field(..., example=True)
    contexts: List[str] = Field(..., example=['continuous-integration/travis-ci'])
    checks: List[Check1]
    contexts_url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts',
    )


class DismissalRestrictions1(BaseModel):
    url: AnyUrl
    users_url: AnyUrl
    teams_url: AnyUrl
    users: List[SimpleUser]
    teams: List[Team1]


class BypassPullRequestAllowances1(BaseModel):
    users: List[SimpleUser]
    teams: List[Team1]


class RequiredPullRequestReviews(BaseModel):
    url: AnyUrl
    dismiss_stale_reviews: Optional[bool] = None
    require_code_owner_reviews: Optional[bool] = None
    required_approving_review_count: Optional[int] = None
    dismissal_restrictions: Optional[DismissalRestrictions1] = None
    bypass_pull_request_allowances: Optional[BypassPullRequestAllowances1] = None


class RequiredSignatures1(RequiredSignatures):
    pass


class EnforceAdmins(BaseModel):
    class Config:
        extra = Extra.forbid

    url: AnyUrl
    enabled: bool


class RequiredLinearHistory1(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: bool


class AllowForcePushes1(RequiredLinearHistory1):
    pass


class AllowDeletions1(RequiredLinearHistory1):
    pass


class RequiredConversationResolution1(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: Optional[bool] = None


class ProtectedBranch(BaseModel):
    """
    Branch protections protect branches
    """

    url: AnyUrl
    required_status_checks: Optional[StatusCheckPolicy] = None
    required_pull_request_reviews: Optional[RequiredPullRequestReviews] = None
    required_signatures: Optional[RequiredSignatures1] = None
    enforce_admins: Optional[EnforceAdmins] = None
    required_linear_history: Optional[RequiredLinearHistory1] = None
    allow_force_pushes: Optional[AllowForcePushes1] = None
    allow_deletions: Optional[AllowDeletions1] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    required_conversation_resolution: Optional[RequiredConversationResolution1] = None


class DeploymentSimple(BaseModel):
    """
    A deployment created as the result of an Actions check run from a workflow that references an environment
    """

    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example/deployments/1')
    id: int = Field(..., description='Unique identifier of the deployment', example=42)
    node_id: str = Field(..., example='MDEwOkRlcGxveW1lbnQx')
    task: str = Field(..., description='Parameter to specify a task to execute', example='deploy')
    original_environment: Optional[str] = Field(None, example='staging')
    environment: str = Field(
        ..., description='Name for the target deployment environment.', example='production'
    )
    description: str = Field(..., example='Deploy request from hubot')
    created_at: datetime = Field(..., example='2012-07-20T01:19:13Z')
    updated_at: datetime = Field(..., example='2012-07-20T01:19:13Z')
    statuses_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/example/deployments/1/statuses'
    )
    repository_url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example')
    transient_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is will no longer exist at some point in the future. Default: false.',
        example=True,
    )
    production_environment: Optional[bool] = Field(
        None,
        description='Specifies if the given environment is one that end-users directly interact with. Default: false.',
        example=True,
    )
    performed_via_github_app: Optional[NullableIntegration] = None


class Conclusion(Enum):
    success = 'success'
    failure = 'failure'
    neutral = 'neutral'
    cancelled = 'cancelled'
    skipped = 'skipped'
    timed_out = 'timed_out'
    action_required = 'action_required'


class Output(BaseModel):
    title: str
    summary: str
    text: str
    annotations_count: int
    annotations_url: AnyUrl


class CheckSuite(BaseModel):
    id: int


class CheckRun(BaseModel):
    """
    A check performed on the code of a given code change
    """

    id: int = Field(..., description='The id of the check.', example=21)
    head_sha: str = Field(
        ...,
        description='The SHA of the commit that is being checked.',
        example='009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    )
    node_id: str = Field(..., example='MDg6Q2hlY2tSdW40')
    external_id: str = Field(..., example='42')
    url: str = Field(..., example='https://api.github.com/repos/github/hello-world/check-runs/4')
    html_url: str = Field(..., example='https://github.com/github/hello-world/runs/4')
    details_url: str = Field(..., example='https://example.com')
    status: Status2 = Field(
        ...,
        description='The phase of the lifecycle that the check is currently in.',
        example='queued',
    )
    conclusion: Conclusion = Field(..., example='neutral')
    started_at: datetime = Field(..., example='2018-05-04T01:14:52Z')
    completed_at: datetime = Field(..., example='2018-05-04T01:14:52Z')
    output: Output
    name: str = Field(..., description='The name of the check.', example='test-coverage')
    check_suite: CheckSuite
    app: NullableIntegration
    pull_requests: List[PullRequestMinimal]
    deployment: Optional[DeploymentSimple] = None


class CheckAnnotation(BaseModel):
    """
    Check Annotation
    """

    path: str = Field(..., example='README.md')
    start_line: int = Field(..., example=2)
    end_line: int = Field(..., example=2)
    start_column: int = Field(..., example=5)
    end_column: int = Field(..., example=10)
    annotation_level: str = Field(..., example='warning')
    title: str = Field(..., example='Spell Checker')
    message: str = Field(..., example="Check your spelling for 'banaas'.")
    raw_details: str = Field(..., example="Do you mean 'bananas' or 'banana'?")
    blob_href: str


class Author1(Author):
    pass


class Committer1(Author):
    pass


class SimpleCommit(BaseModel):
    """
    Simple Commit
    """

    id: str
    tree_id: str
    message: str
    timestamp: datetime
    author: Author1
    committer: Committer1


class CheckSuite1(BaseModel):
    """
    A suite of checks performed on the code of a given code change
    """

    id: int = Field(..., example=5)
    node_id: str = Field(..., example='MDEwOkNoZWNrU3VpdGU1')
    head_branch: str = Field(..., example='master')
    head_sha: str = Field(
        ...,
        description='The SHA of the head commit that is being checked.',
        example='009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d',
    )
    status: Status2 = Field(..., example='completed')
    conclusion: Conclusion = Field(..., example='neutral')
    url: str = Field(..., example='https://api.github.com/repos/github/hello-world/check-suites/5')
    before: str = Field(..., example='146e867f55c26428e5f9fade55a9bbf5e95a7912')
    after: str = Field(..., example='d6fde92930d4715a2b49857d24b940956b26d2d3')
    pull_requests: List[PullRequestMinimal]
    app: NullableIntegration
    repository: MinimalRepository
    created_at: datetime
    updated_at: datetime
    head_commit: SimpleCommit
    latest_check_runs_count: int
    check_runs_url: str
    rerequestable: Optional[bool] = None
    runs_rerequestable: Optional[bool] = None


class AutoTriggerCheck(BaseModel):
    app_id: int
    setting: bool


class Preferences(BaseModel):
    auto_trigger_checks: Optional[List[AutoTriggerCheck]] = None


class CheckSuitePreference(BaseModel):
    """
    Check suite configuration preferences for a repository.
    """

    preferences: Preferences
    repository: MinimalRepository


class CodeScanningAlertRuleSummary(BaseModel):
    id: Optional[str] = Field(
        None, description='A unique identifier for the rule used to detect the alert.'
    )
    name: Optional[str] = Field(None, description='The name of the rule used to detect the alert.')
    tags: Optional[List[str]] = Field(None, description='A set of tags applicable for the rule.')
    severity: Optional[Severity] = Field(None, description='The severity of the alert.')
    description: Optional[str] = Field(
        None, description='A short description of the rule used to detect the alert.'
    )


class CodeScanningAlertItems(BaseModel):
    number: AlertNumber
    created_at: AlertCreatedAt
    updated_at: Optional[AlertUpdatedAt] = None
    url: AlertUrl
    html_url: AlertHtmlUrl
    instances_url: AlertInstancesUrl
    state: CodeScanningAlertState
    fixed_at: Optional[CodeScanningAlertFixedAt] = None
    dismissed_by: NullableSimpleUser
    dismissed_at: CodeScanningAlertDismissedAt
    dismissed_reason: CodeScanningAlertDismissedReason
    rule: CodeScanningAlertRuleSummary
    tool: CodeScanningAnalysisTool
    most_recent_instance: CodeScanningAlertInstance


class CodeScanningAlert(BaseModel):
    number: AlertNumber
    created_at: AlertCreatedAt
    updated_at: Optional[AlertUpdatedAt] = None
    url: AlertUrl
    html_url: AlertHtmlUrl
    instances_url: AlertInstancesUrl
    state: CodeScanningAlertState
    fixed_at: Optional[CodeScanningAlertFixedAt] = None
    dismissed_by: NullableSimpleUser
    dismissed_at: CodeScanningAlertDismissedAt
    dismissed_reason: CodeScanningAlertDismissedReason
    rule: CodeScanningAlertRule
    tool: CodeScanningAnalysisTool
    most_recent_instance: CodeScanningAlertInstance


class CodeScanningAlertSetState(Enum):
    """
    Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
    """

    open = 'open'
    dismissed = 'dismissed'


class CodeScanningAnalysisSarifId(BaseModel):
    __root__: str = Field(
        ...,
        description='An identifier for the upload.',
        example='6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53',
    )


class CodeScanningAnalysisCommitSha(BaseModel):
    __root__: constr(regex=r'^[0-9a-fA-F]+$', min_length=40, max_length=40) = Field(
        ..., description='The SHA of the commit to which the analysis you are uploading relates.'
    )


class CodeScanningAnalysisEnvironment(BaseModel):
    __root__: str = Field(
        ...,
        description='Identifies the variable values associated with the environment in which this analysis was performed.',
    )


class CodeScanningAnalysisCreatedAt(BaseModel):
    __root__: datetime = Field(
        ...,
        description='The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
        read_only=True,
    )


class CodeScanningAnalysisUrl(BaseModel):
    __root__: AnyUrl = Field(
        ..., description='The REST API URL of the analysis resource.', read_only=True
    )


class CodeScanningAnalysis(BaseModel):
    ref: CodeScanningRef
    commit_sha: CodeScanningAnalysisCommitSha
    analysis_key: CodeScanningAnalysisAnalysisKey
    environment: CodeScanningAnalysisEnvironment
    category: Optional[CodeScanningAnalysisCategory] = None
    error: str = Field(..., example='error reading field xyz')
    created_at: CodeScanningAnalysisCreatedAt
    results_count: int = Field(..., description='The total number of results in the analysis.')
    rules_count: int = Field(..., description='The total number of rules used in the analysis.')
    id: int = Field(..., description='Unique identifier for this analysis.')
    url: CodeScanningAnalysisUrl
    sarif_id: CodeScanningAnalysisSarifId
    tool: CodeScanningAnalysisTool
    deletable: bool
    warning: str = Field(
        ...,
        description='Warning generated when processing the analysis',
        example='123 results were ignored',
    )


class CodeScanningAnalysisDeletion(BaseModel):
    """
    Successful deletion of a code scanning analysis
    """

    next_analysis_url: AnyUrl = Field(
        ...,
        description='Next deletable analysis in chain, without last analysis deletion confirmation',
        read_only=True,
    )
    confirm_delete_url: AnyUrl = Field(
        ...,
        description='Next deletable analysis in chain, with last analysis deletion confirmation',
        read_only=True,
    )


class CodeScanningAnalysisSarifFile(BaseModel):
    __root__: str = Field(
        ...,
        description='A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."',
    )


class CodeScanningSarifsReceipt(BaseModel):
    id: Optional[CodeScanningAnalysisSarifId] = None
    url: Optional[AnyUrl] = Field(
        None, description='The REST API URL for checking the status of the upload.', read_only=True
    )


class ProcessingStatus(Enum):
    """
    `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
    """

    pending = 'pending'
    complete = 'complete'
    failed = 'failed'


class CodeScanningSarifsStatus(BaseModel):
    processing_status: Optional[ProcessingStatus] = Field(
        None,
        description='`pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.',
    )
    analyses_url: Optional[AnyUrl] = Field(
        None,
        description='The REST API URL for getting the analyses associated with the upload.',
        read_only=True,
    )
    errors: Optional[List[str]] = Field(
        None,
        description='Any errors that ocurred during processing of the delivery.',
        read_only=True,
    )


class Error1(BaseModel):
    line: int = Field(..., description='The line number where this errors occurs.', example=7)
    column: int = Field(..., description='The column number where this errors occurs.', example=3)
    source: Optional[str] = Field(
        None, description='The contents of the line where the error occurs.', example='* user'
    )
    kind: str = Field(..., description='The type of error.', example='Invalid owner')
    suggestion: Optional[str] = Field(
        None,
        description='Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.',
        example='The pattern `/` will never match anything, did you mean `*` instead?',
    )
    message: str = Field(
        ...,
        description='A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).',
        example='Invalid owner on line 7:\n\n  * user\n    ^',
    )
    path: str = Field(
        ...,
        description='The path of the file where the error occured.',
        example='.github/CODEOWNERS',
    )


class CodeownersErrors(BaseModel):
    """
    A list of errors found in a repo's CODEOWNERS file
    """

    errors: List[Error1]


class PrebuildAvailability(Enum):
    """
    Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
    """

    none = 'none'
    blob = 'blob'
    pool = 'pool'


class NullableCodespaceMachine(BaseModel):
    """
    A description of the machine powering a codespace.
    """

    name: str = Field(..., description='The name of the machine.', example='standardLinux')
    display_name: str = Field(
        ...,
        description='The display name of the machine includes cores, memory, and storage.',
        example='4 cores, 8 GB RAM, 64 GB storage',
    )
    operating_system: str = Field(
        ..., description='The operating system of the machine.', example='linux'
    )
    storage_in_bytes: int = Field(
        ..., description='How much storage is available to the codespace.', example=68719476736
    )
    memory_in_bytes: int = Field(
        ..., description='How much memory is available to the codespace.', example=8589934592
    )
    cpus: int = Field(..., description='How many cores are available to the codespace.', example=4)
    prebuild_availability: PrebuildAvailability = Field(
        ...,
        description='Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.',
        example='blob',
    )


class State5(Enum):
    """
    State of this codespace.
    """

    unknown = 'Unknown'
    created = 'Created'
    queued = 'Queued'
    provisioning = 'Provisioning'
    available = 'Available'
    awaiting = 'Awaiting'
    unavailable = 'Unavailable'
    deleted = 'Deleted'
    moved = 'Moved'
    shutdown = 'Shutdown'
    archived = 'Archived'
    starting = 'Starting'
    shutting_down = 'ShuttingDown'
    failed = 'Failed'
    exporting = 'Exporting'
    updating = 'Updating'
    rebuilding = 'Rebuilding'


class GitStatus(BaseModel):
    """
    Details about the codespace's git repository.
    """

    ahead: Optional[int] = Field(
        None,
        description='The number of commits the local repository is ahead of the remote.',
        example=0,
    )
    behind: Optional[int] = Field(
        None,
        description='The number of commits the local repository is behind the remote.',
        example=0,
    )
    has_unpushed_changes: Optional[bool] = Field(
        None, description='Whether the local repository has unpushed changes.'
    )
    has_uncommitted_changes: Optional[bool] = Field(
        None, description='Whether the local repository has uncommitted changes.'
    )
    ref: Optional[str] = Field(
        None,
        description='The current branch (or SHA if in detached HEAD state) of the local repository.',
        example='main',
    )


class Location(Enum):
    """
    The Azure region where this codespace is located.
    """

    east_us = 'EastUs'
    south_east_asia = 'SouthEastAsia'
    west_europe = 'WestEurope'
    west_us2 = 'WestUs2'


class RuntimeConstraints(BaseModel):
    allowed_port_privacy_settings: Optional[List[str]] = Field(
        None, description='The privacy settings a user can select from when forwarding a port.'
    )


class Codespace(BaseModel):
    """
    A codespace.
    """

    id: int = Field(..., example=1)
    name: str = Field(
        ...,
        description='Automatically generated name of this codespace.',
        example='monalisa-octocat-hello-world-g4wpq6h95q',
    )
    display_name: Optional[str] = Field(
        None, description='Display name for this codespace.', example='bookish space pancake'
    )
    environment_id: str = Field(
        ...,
        description="UUID identifying this codespace's environment.",
        example='26a7c758-7299-4a73-b978-5a92a7ae98a0',
    )
    owner: SimpleUser
    billable_owner: SimpleUser
    repository: MinimalRepository
    machine: NullableCodespaceMachine
    prebuild: bool = Field(
        ..., description='Whether the codespace was created from a prebuild.', example=False
    )
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    last_used_at: datetime = Field(
        ...,
        description='Last known time this codespace was started.',
        example='2011-01-26T19:01:12Z',
    )
    state: State5 = Field(..., description='State of this codespace.', example='Available')
    url: AnyUrl = Field(..., description='API URL for this codespace.')
    git_status: GitStatus = Field(..., description="Details about the codespace's git repository.")
    location: Location = Field(
        ..., description='The Azure region where this codespace is located.', example='WestUs2'
    )
    idle_timeout_minutes: int = Field(
        ...,
        description='The number of minutes of inactivity after which this codespace will be automatically stopped.',
        example=60,
    )
    web_url: AnyUrl = Field(..., description='URL to access this codespace on the web.')
    machines_url: AnyUrl = Field(
        ..., description='API URL to access available alternate machine types for this codespace.'
    )
    start_url: AnyUrl = Field(..., description='API URL to start this codespace.')
    stop_url: AnyUrl = Field(..., description='API URL to stop this codespace.')
    pulls_url: AnyUrl = Field(
        ..., description='API URL for the Pull Request associated with this codespace, if any.'
    )
    recent_folders: List[str]
    runtime_constraints: Optional[RuntimeConstraints] = None


class CodespaceMachine(NullableCodespaceMachine):
    """
    A description of the machine powering a codespace.
    """

    pass


class Permissions14(BaseModel):
    pull: bool
    triage: Optional[bool] = None
    push: bool
    maintain: Optional[bool] = None
    admin: bool


class Collaborator(BaseModel):
    """
    Collaborator
    """

    login: str = Field(..., example='octocat')
    id: int = Field(..., example=1)
    email: Optional[str] = None
    name: Optional[str] = None
    node_id: str = Field(..., example='MDQ6VXNlcjE=')
    avatar_url: AnyUrl = Field(..., example='https://github.com/images/error/octocat_happy.gif')
    gravatar_id: str = Field(..., example='41d064eb2195891e12d0413f63227ea7')
    url: AnyUrl = Field(..., example='https://api.github.com/users/octocat')
    html_url: AnyUrl = Field(..., example='https://github.com/octocat')
    followers_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/followers')
    following_url: str = Field(
        ..., example='https://api.github.com/users/octocat/following{/other_user}'
    )
    gists_url: str = Field(..., example='https://api.github.com/users/octocat/gists{/gist_id}')
    starred_url: str = Field(
        ..., example='https://api.github.com/users/octocat/starred{/owner}{/repo}'
    )
    subscriptions_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/subscriptions'
    )
    organizations_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/orgs')
    repos_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/repos')
    events_url: str = Field(..., example='https://api.github.com/users/octocat/events{/privacy}')
    received_events_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/received_events'
    )
    type: str = Field(..., example='User')
    site_admin: bool
    permissions: Optional[Permissions14] = None
    role_name: str = Field(..., example='admin')


class Permissions15(Enum):
    """
    The permission associated with the invitation.
    """

    read = 'read'
    write = 'write'
    admin = 'admin'
    triage = 'triage'
    maintain = 'maintain'


class RepositoryInvitation(BaseModel):
    """
    Repository invitations let you manage who you collaborate with.
    """

    id: int = Field(..., description='Unique identifier of the repository invitation.', example=42)
    repository: MinimalRepository
    invitee: NullableSimpleUser
    inviter: NullableSimpleUser
    permissions: Permissions15 = Field(
        ..., description='The permission associated with the invitation.', example='read'
    )
    created_at: datetime = Field(..., example='2016-06-13T14:52:50-05:00')
    expired: Optional[bool] = Field(None, description='Whether or not the invitation has expired')
    url: str = Field(
        ...,
        description='URL for the repository invitation',
        example='https://api.github.com/user/repository-invitations/1',
    )
    html_url: str = Field(..., example='https://github.com/octocat/Hello-World/invitations')
    node_id: str


class Permissions16(Permissions14):
    pass


class NullableCollaborator(BaseModel):
    """
    Collaborator
    """

    login: str = Field(..., example='octocat')
    id: int = Field(..., example=1)
    email: Optional[str] = None
    name: Optional[str] = None
    node_id: str = Field(..., example='MDQ6VXNlcjE=')
    avatar_url: AnyUrl = Field(..., example='https://github.com/images/error/octocat_happy.gif')
    gravatar_id: str = Field(..., example='41d064eb2195891e12d0413f63227ea7')
    url: AnyUrl = Field(..., example='https://api.github.com/users/octocat')
    html_url: AnyUrl = Field(..., example='https://github.com/octocat')
    followers_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/followers')
    following_url: str = Field(
        ..., example='https://api.github.com/users/octocat/following{/other_user}'
    )
    gists_url: str = Field(..., example='https://api.github.com/users/octocat/gists{/gist_id}')
    starred_url: str = Field(
        ..., example='https://api.github.com/users/octocat/starred{/owner}{/repo}'
    )
    subscriptions_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/subscriptions'
    )
    organizations_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/orgs')
    repos_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/repos')
    events_url: str = Field(..., example='https://api.github.com/users/octocat/events{/privacy}')
    received_events_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/received_events'
    )
    type: str = Field(..., example='User')
    site_admin: bool
    permissions: Optional[Permissions16] = None
    role_name: str = Field(..., example='admin')


class RepositoryCollaboratorPermission(BaseModel):
    """
    Repository Collaborator Permission
    """

    permission: str
    role_name: str = Field(..., example='admin')
    user: NullableCollaborator


class CommitComment(BaseModel):
    """
    Commit Comment
    """

    html_url: AnyUrl
    url: AnyUrl
    id: int
    node_id: str
    body: str
    path: str
    position: int
    line: int
    commit_id: str
    user: NullableSimpleUser
    created_at: datetime
    updated_at: datetime
    author_association: AuthorAssociation
    reactions: Optional[ReactionRollup] = None


class Commit3(BaseModel):
    sha: str
    url: str


class BranchShort(BaseModel):
    """
    Branch Short
    """

    name: str
    commit: Commit3
    protected: bool


class Link(BaseModel):
    """
    Hypermedia Link
    """

    href: str


class MergeMethod(Enum):
    """
    The merge method to use.
    """

    merge = 'merge'
    squash = 'squash'
    rebase = 'rebase'


class AutoMerge(BaseModel):
    """
    The status of auto merging a pull request.
    """

    enabled_by: SimpleUser
    merge_method: MergeMethod = Field(..., description='The merge method to use.')
    commit_title: str = Field(..., description='Title for the merge commit message.')
    commit_message: str = Field(..., description='Commit message for the merge commit.')


class Label1(BaseModel):
    id: int
    node_id: str
    url: str
    name: str
    description: str
    color: str
    default: bool


class Head1(BaseModel):
    label: str
    ref: str
    repo: Repository
    sha: str
    user: NullableSimpleUser


class Base1(Head1):
    pass


class _Links2(BaseModel):
    comments: Link
    commits: Link
    statuses: Link
    html: Link
    issue: Link
    review_comments: Link
    review_comment: Link
    self: Link


class PullRequestSimple(BaseModel):
    """
    Pull Request Simple
    """

    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1347')
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDExOlB1bGxSZXF1ZXN0MQ==')
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/pull/1347')
    diff_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/pull/1347.diff')
    patch_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/pull/1347.patch')
    issue_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/issues/1347'
    )
    commits_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits'
    )
    review_comments_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments'
    )
    review_comment_url: str = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}'
    )
    comments_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/issues/1347/comments'
    )
    statuses_url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    number: int = Field(..., example=1347)
    state: str = Field(..., example='open')
    locked: bool = Field(..., example=True)
    title: str = Field(..., example='new-feature')
    user: NullableSimpleUser
    body: str = Field(..., example='Please pull these awesome changes')
    labels: List[Label1]
    milestone: NullableMilestone
    active_lock_reason: Optional[str] = Field(None, example='too heated')
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    closed_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    merged_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    merge_commit_sha: str = Field(..., example='e5bd3914e2e596debea16f433f57875b5b90bcd6')
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    requested_reviewers: Optional[List[SimpleUser]] = None
    requested_teams: Optional[List[Team1]] = None
    head: Head1
    base: Base1
    _links: _Links2
    author_association: AuthorAssociation
    auto_merge: AutoMerge
    draft: Optional[bool] = Field(
        None, description='Indicates whether or not the pull request is a draft.', example=False
    )


class SimpleCommitStatus(BaseModel):
    description: str
    id: int
    node_id: str
    state: str
    context: str
    target_url: AnyUrl
    required: Optional[bool] = None
    avatar_url: AnyUrl
    url: AnyUrl
    created_at: datetime
    updated_at: datetime


class CombinedCommitStatus(BaseModel):
    """
    Combined Commit Status
    """

    state: str
    statuses: List[SimpleCommitStatus]
    sha: str
    total_count: int
    repository: MinimalRepository
    commit_url: AnyUrl
    url: AnyUrl


class Status7(BaseModel):
    """
    The status of a commit.
    """

    url: str
    avatar_url: str
    id: int
    node_id: str
    state: str
    description: str
    target_url: str
    context: str
    created_at: str
    updated_at: str
    creator: NullableSimpleUser


class NullableCodeOfConductSimple(CodeOfConductSimple):
    """
    Code of Conduct Simple
    """

    pass


class NullableCommunityHealthFile(BaseModel):
    url: AnyUrl
    html_url: AnyUrl


class Files3(BaseModel):
    code_of_conduct: NullableCodeOfConductSimple
    code_of_conduct_file: NullableCommunityHealthFile
    license: NullableLicenseSimple
    contributing: NullableCommunityHealthFile
    readme: NullableCommunityHealthFile
    issue_template: NullableCommunityHealthFile
    pull_request_template: NullableCommunityHealthFile


class CommunityProfile(BaseModel):
    """
    Community Profile
    """

    health_percentage: int = Field(..., example=100)
    description: str = Field(..., example='My first repository on GitHub!')
    documentation: str = Field(..., example='example.com')
    files: Files3
    updated_at: datetime = Field(..., example='2017-02-28T19:09:29Z')
    content_reports_enabled: Optional[bool] = Field(None, example=True)


class Status8(Enum):
    diverged = 'diverged'
    ahead = 'ahead'
    behind = 'behind'
    identical = 'identical'


class CommitComparison(BaseModel):
    """
    Commit Comparison
    """

    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/compare/master...topic'
    )
    html_url: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/compare/master...topic'
    )
    permalink_url: AnyUrl = Field(
        ...,
        example='https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17',
    )
    diff_url: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/compare/master...topic.diff'
    )
    patch_url: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/compare/master...topic.patch'
    )
    base_commit: Commit1
    merge_base_commit: Commit1
    status: Status8 = Field(..., example='ahead')
    ahead_by: int = Field(..., example=4)
    behind_by: int = Field(..., example=5)
    total_commits: int = Field(..., example=6)
    commits: List[Commit1]
    files: Optional[List[DiffEntry]] = None


class _Links3(BaseModel):
    git: AnyUrl
    html: AnyUrl
    self: AnyUrl


class Entry(BaseModel):
    type: str
    size: int
    name: str
    path: str
    content: Optional[str] = None
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    download_url: AnyUrl
    _links: _Links3


class _Links4(_Links3):
    pass


class ContentTree(BaseModel):
    """
    Content Tree
    """

    type: str
    size: int
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    download_url: AnyUrl
    entries: Optional[List[Entry]] = None
    _links: _Links4


class _Links5(_Links3):
    pass


class ContentDirectoryItem(BaseModel):
    type: str
    size: int
    name: str
    path: str
    content: Optional[str] = None
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    download_url: AnyUrl
    _links: _Links5


class ContentDirectory(BaseModel):
    """
    A list of directory items
    """

    __root__: List[ContentDirectoryItem] = Field(
        ..., description='A list of directory items', title='Content Directory'
    )


class _Links6(_Links3):
    pass


class ContentFile(BaseModel):
    """
    Content File
    """

    type: str
    encoding: str
    size: int
    name: str
    path: str
    content: str
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    download_url: AnyUrl
    _links: _Links6
    target: Optional[str] = Field(None, example='"actual/actual.md"')
    submodule_git_url: Optional[str] = Field(None, example='"git://example.com/defunkt/dotjs.git"')


class _Links7(_Links3):
    pass


class ContentSymlink(BaseModel):
    """
    An object describing a symlink
    """

    type: str
    target: str
    size: int
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    download_url: AnyUrl
    _links: _Links7


class _Links8(_Links3):
    pass


class ContentSubmodule(BaseModel):
    """
    An object describing a symlink
    """

    type: str
    submodule_git_url: AnyUrl
    size: int
    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    download_url: AnyUrl
    _links: _Links8


class _Links9(BaseModel):
    self: Optional[str] = None
    git: Optional[str] = None
    html: Optional[str] = None


class Content1(BaseModel):
    name: Optional[str] = None
    path: Optional[str] = None
    sha: Optional[str] = None
    size: Optional[int] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    git_url: Optional[str] = None
    download_url: Optional[str] = None
    type: Optional[str] = None
    _links: Optional[_Links9] = None


class Author2(BaseModel):
    date: Optional[str] = None
    name: Optional[str] = None
    email: Optional[str] = None


class Committer2(Author2):
    pass


class Tree1(BaseModel):
    url: Optional[str] = None
    sha: Optional[str] = None


class Parent1(BaseModel):
    url: Optional[str] = None
    html_url: Optional[str] = None
    sha: Optional[str] = None


class Verification1(BaseModel):
    verified: Optional[bool] = None
    reason: Optional[str] = None
    signature: Optional[str] = None
    payload: Optional[str] = None


class Commit4(BaseModel):
    sha: Optional[str] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    author: Optional[Author2] = None
    committer: Optional[Committer2] = None
    message: Optional[str] = None
    tree: Optional[Tree1] = None
    parents: Optional[List[Parent1]] = None
    verification: Optional[Verification1] = None


class FileCommit(BaseModel):
    """
    File Commit
    """

    content: Content1
    commit: Commit4


class Contributor(BaseModel):
    """
    Contributor
    """

    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    avatar_url: Optional[AnyUrl] = None
    gravatar_id: Optional[str] = None
    url: Optional[AnyUrl] = None
    html_url: Optional[AnyUrl] = None
    followers_url: Optional[AnyUrl] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[AnyUrl] = None
    organizations_url: Optional[AnyUrl] = None
    repos_url: Optional[AnyUrl] = None
    events_url: Optional[str] = None
    received_events_url: Optional[AnyUrl] = None
    type: str
    site_admin: Optional[bool] = None
    contributions: int
    email: Optional[str] = None
    name: Optional[str] = None


class DependabotSecret(BaseModel):
    """
    Set secrets for Dependabot.
    """

    name: str = Field(..., description='The name of the secret.', example='MY_ARTIFACTORY_PASSWORD')
    created_at: datetime
    updated_at: datetime


class State6(Enum):
    """
    The state of the status.
    """

    error = 'error'
    failure = 'failure'
    inactive = 'inactive'
    pending = 'pending'
    success = 'success'
    queued = 'queued'
    in_progress = 'in_progress'


class DeploymentStatus(BaseModel):
    """
    The status of a deployment.
    """

    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/example/deployments/42/statuses/1'
    )
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDE2OkRlcGxveW1lbnRTdGF0dXMx')
    state: State6 = Field(..., description='The state of the status.', example='success')
    creator: NullableSimpleUser
    description: Optional[constr(max_length=140)] = Field(
        '',
        description='A short description of the status.',
        example='Deployment finished successfully.',
    )
    environment: Optional[str] = Field(
        '',
        description='The environment of the deployment that the status is for.',
        example='production',
    )
    target_url: Optional[AnyUrl] = Field(
        '',
        description='Deprecated: the URL to associate with this status.',
        example='https://example.com/deployment/42/output',
    )
    created_at: datetime = Field(..., example='2012-07-20T01:19:13Z')
    updated_at: datetime = Field(..., example='2012-07-20T01:19:13Z')
    deployment_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/example/deployments/42'
    )
    repository_url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example')
    environment_url: Optional[AnyUrl] = Field(
        '',
        description='The URL for accessing your environment.',
        example='https://staging.example.com/',
    )
    log_url: Optional[AnyUrl] = Field(
        '',
        description='The URL to associate with this status.',
        example='https://example.com/deployment/42/output',
    )
    performed_via_github_app: Optional[NullableIntegration] = None


class WaitTimer(BaseModel):
    __root__: int = Field(
        ...,
        description='The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).',
        example=30,
    )


class DeploymentBranchPolicy(BaseModel):
    """
    The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
    """

    protected_branches: bool = Field(
        ...,
        description='Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.',
    )
    custom_branch_policies: bool = Field(
        ...,
        description='Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.',
    )


class ProtectionRule(BaseModel):
    id: int = Field(..., example=3515)
    node_id: str = Field(..., example='MDQ6R2F0ZTM1MTU=')
    type: str = Field(..., example='wait_timer')
    wait_timer: Optional[WaitTimer] = None


class Reviewer1(Reviewer):
    pass


class ProtectionRule1(BaseModel):
    id: int = Field(..., example=3755)
    node_id: str = Field(..., example='MDQ6R2F0ZTM3NTU=')
    type: str = Field(..., example='required_reviewers')
    reviewers: Optional[List[Reviewer1]] = Field(
        None,
        description='The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.',
    )


class ProtectionRule2(BaseModel):
    id: int = Field(..., example=3515)
    node_id: str = Field(..., example='MDQ6R2F0ZTM1MTU=')
    type: str = Field(..., example='branch_policy')


class Environment2(BaseModel):
    """
    Details of a deployment environment
    """

    id: int = Field(..., description='The id of the environment.', example=56780428)
    node_id: str = Field(..., example='MDExOkVudmlyb25tZW50NTY3ODA0Mjg=')
    name: str = Field(..., description='The name of the environment.', example='staging')
    url: str = Field(
        ..., example='https://api.github.com/repos/github/hello-world/environments/staging'
    )
    html_url: str = Field(
        ...,
        example='https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging',
    )
    created_at: datetime = Field(
        ...,
        description='The time that the environment was created, in ISO 8601 format.',
        example='2020-11-23T22:00:40Z',
    )
    updated_at: datetime = Field(
        ...,
        description='The time that the environment was last updated, in ISO 8601 format.',
        example='2020-11-23T22:00:40Z',
    )
    protection_rules: Optional[List[Union[ProtectionRule, ProtectionRule1, ProtectionRule2]]] = None
    deployment_branch_policy: Optional[DeploymentBranchPolicy] = None


class ShortBlob(BaseModel):
    """
    Short Blob
    """

    url: str
    sha: str


class Blob(BaseModel):
    """
    Blob
    """

    content: str
    encoding: str
    url: AnyUrl
    sha: str
    size: int
    node_id: str
    highlighted_content: Optional[str] = None


class Author3(BaseModel):
    """
    Identifying information for the git-user
    """

    date: datetime = Field(
        ..., description='Timestamp of the commit', example='2014-08-09T08:02:04+12:00'
    )
    email: str = Field(
        ..., description='Git email address of the user', example='monalisa.octocat@example.com'
    )
    name: str = Field(..., description='Name of the git user', example='Monalisa Octocat')


class Committer3(Author3):
    """
    Identifying information for the git-user
    """

    pass


class Tree2(BaseModel):
    sha: str = Field(
        ..., description='SHA for the commit', example='7638417db6d59f3c431d3e1f261cc637155684cd'
    )
    url: AnyUrl


class Parent2(BaseModel):
    sha: str = Field(
        ..., description='SHA for the commit', example='7638417db6d59f3c431d3e1f261cc637155684cd'
    )
    url: AnyUrl
    html_url: AnyUrl


class Verification2(BaseModel):
    verified: bool
    reason: str
    signature: str
    payload: str


class GitCommit(BaseModel):
    """
    Low-level Git commit operations within a repository
    """

    sha: str = Field(
        ..., description='SHA for the commit', example='7638417db6d59f3c431d3e1f261cc637155684cd'
    )
    node_id: str
    url: AnyUrl
    author: Author3 = Field(..., description='Identifying information for the git-user')
    committer: Committer3 = Field(..., description='Identifying information for the git-user')
    message: str = Field(
        ..., description='Message describing the purpose of the commit', example='Fix #42'
    )
    tree: Tree2
    parents: List[Parent2]
    verification: Verification2
    html_url: AnyUrl


class Object(BaseModel):
    type: str
    sha: constr(min_length=40, max_length=40) = Field(
        ..., description='SHA for the reference', example='7638417db6d59f3c431d3e1f261cc637155684cd'
    )
    url: AnyUrl


class GitRef(BaseModel):
    """
    Git references within a repository
    """

    ref: str
    node_id: str
    url: AnyUrl
    object: Object


class Tagger(BaseModel):
    date: str
    email: str
    name: str


class Object1(BaseModel):
    sha: str
    type: str
    url: AnyUrl


class GitTag(BaseModel):
    """
    Metadata for a Git tag
    """

    node_id: str = Field(
        ..., example='MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw=='
    )
    tag: str = Field(..., description='Name of the tag', example='v0.0.1')
    sha: str = Field(..., example='940bd336248efae0f9ee5bc7b2d5c985887b16ac')
    url: AnyUrl = Field(
        ...,
        description='URL for the tag',
        example='https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac',
    )
    message: str = Field(
        ...,
        description='Message describing the purpose of the tag',
        example='Initial public release',
    )
    tagger: Tagger
    object: Object1
    verification: Optional[Verification] = None


class TreeItem(BaseModel):
    path: Optional[str] = Field(None, example='test/file.rb')
    mode: Optional[str] = Field(None, example='040000')
    type: Optional[str] = Field(None, example='tree')
    sha: Optional[str] = Field(None, example='23f6827669e43831def8a7ad935069c8bd418261')
    size: Optional[int] = Field(None, example=12)
    url: Optional[str] = Field(
        None,
        example='https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261',
    )


class GitTree(BaseModel):
    """
    The hierarchy between files in a Git repository.
    """

    sha: str
    url: AnyUrl
    truncated: bool
    tree: List[TreeItem] = Field(
        ...,
        description='Objects specifying a tree structure',
        example=[
            {
                'path': 'file.rb',
                'mode': '100644',
                'type': 'blob',
                'size': 30,
                'sha': '44b4fc6d56897b048c772eb4087f854f46256132',
                'url': 'https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132',
                'properties': {
                    'path': {'type': 'string'},
                    'mode': {'type': 'string'},
                    'type': {'type': 'string'},
                    'size': {'type': 'integer'},
                    'sha': {'type': 'string'},
                    'url': {'type': 'string'},
                },
                'required': ['path', 'mode', 'type', 'sha', 'url', 'size'],
            }
        ],
    )


class HookResponse(BaseModel):
    code: int
    status: str
    message: str


class Config1(BaseModel):
    email: Optional[str] = Field(None, example='"foo@bar.com"')
    password: Optional[str] = Field(None, example='"foo"')
    room: Optional[str] = Field(None, example='"roomer"')
    subdomain: Optional[str] = Field(None, example='"foo"')
    url: Optional[WebhookConfigUrl] = None
    insecure_ssl: Optional[WebhookConfigInsecureSsl] = None
    content_type: Optional[WebhookConfigContentType] = None
    digest: Optional[str] = Field(None, example='"sha256"')
    secret: Optional[WebhookConfigSecret] = None
    token: Optional[str] = Field(None, example='"abc"')


class Hook(BaseModel):
    """
    Webhooks for repositories.
    """

    type: str
    id: int = Field(..., description='Unique identifier of the webhook.', example=42)
    name: str = Field(
        ..., description="The name of a valid service, use 'web' for a webhook.", example='web'
    )
    active: bool = Field(
        ...,
        description='Determines whether the hook is actually triggered on pushes.',
        example=True,
    )
    events: List[str] = Field(
        ...,
        description="Determines what events the hook is triggered for. Default: ['push'].",
        example=['push', 'pull_request'],
    )
    config: Config1
    updated_at: datetime = Field(..., example='2011-09-06T20:39:23Z')
    created_at: datetime = Field(..., example='2011-09-06T17:26:27Z')
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World/hooks/1')
    test_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/hooks/1/test'
    )
    ping_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/hooks/1/pings'
    )
    deliveries_url: Optional[AnyUrl] = Field(
        None, example='https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries'
    )
    last_response: HookResponse


class Status9(Enum):
    auth = 'auth'
    error = 'error'
    none = 'none'
    detecting = 'detecting'
    choose = 'choose'
    auth_failed = 'auth_failed'
    importing = 'importing'
    mapping = 'mapping'
    waiting_to_push = 'waiting_to_push'
    pushing = 'pushing'
    complete = 'complete'
    setup = 'setup'
    unknown = 'unknown'
    detection_found_multiple = 'detection_found_multiple'
    detection_found_nothing = 'detection_found_nothing'
    detection_needs_auth = 'detection_needs_auth'


class ProjectChoice(BaseModel):
    vcs: Optional[str] = None
    tfvc_project: Optional[str] = None
    human_name: Optional[str] = None


class Import(BaseModel):
    """
    A repository import from an external source.
    """

    vcs: str
    use_lfs: Optional[bool] = None
    vcs_url: str = Field(..., description='The URL of the originating repository.')
    svc_root: Optional[str] = None
    tfvc_project: Optional[str] = None
    status: Status9
    status_text: Optional[str] = None
    failed_step: Optional[str] = None
    error_message: Optional[str] = None
    import_percent: Optional[int] = None
    commit_count: Optional[int] = None
    push_percent: Optional[int] = None
    has_large_files: Optional[bool] = None
    large_files_size: Optional[int] = None
    large_files_count: Optional[int] = None
    project_choices: Optional[List[ProjectChoice]] = None
    message: Optional[str] = None
    authors_count: Optional[int] = None
    url: AnyUrl
    html_url: AnyUrl
    authors_url: AnyUrl
    repository_url: AnyUrl
    svn_root: Optional[str] = None


class PorterAuthor(BaseModel):
    """
    Porter Author
    """

    id: int
    remote_id: str
    remote_name: str
    email: str
    name: str
    url: AnyUrl
    import_url: AnyUrl


class PorterLargeFile(BaseModel):
    """
    Porter Large File
    """

    ref_name: str
    path: str
    oid: str
    size: int


class Label2(Label):
    pass


class PullRequest1(PullRequest):
    pass


class NullableIssue(BaseModel):
    """
    Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
    """

    id: int
    node_id: str
    url: AnyUrl = Field(
        ...,
        description='URL for the issue',
        example='https://api.github.com/repositories/42/issues/1',
    )
    repository_url: AnyUrl
    labels_url: str
    comments_url: AnyUrl
    events_url: AnyUrl
    html_url: AnyUrl
    number: int = Field(
        ..., description='Number uniquely identifying the issue within its repository', example=42
    )
    state: str = Field(
        ..., description="State of the issue; either 'open' or 'closed'", example='open'
    )
    title: str = Field(
        ...,
        description='Title of the issue',
        example='Widget creation fails in Safari on OS X 10.8',
    )
    body: Optional[str] = Field(
        None,
        description='Contents of the issue',
        example='It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?',
    )
    user: NullableSimpleUser
    labels: List[Union[str, Label2]] = Field(
        ...,
        description='Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository',
        example=['bug', 'registration'],
    )
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    milestone: NullableMilestone
    locked: bool
    active_lock_reason: Optional[str] = None
    comments: int
    pull_request: Optional[PullRequest1] = None
    closed_at: datetime
    created_at: datetime
    updated_at: datetime
    draft: Optional[bool] = None
    closed_by: Optional[NullableSimpleUser] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    repository: Optional[Repository] = None
    performed_via_github_app: Optional[NullableIntegration] = None
    author_association: AuthorAssociation
    reactions: Optional[ReactionRollup] = None


class IssueEventLabel(BaseModel):
    """
    Issue Event Label
    """

    name: str
    color: str


class IssueEventDismissedReview(BaseModel):
    state: str
    review_id: int
    dismissal_message: str
    dismissal_commit_id: Optional[str] = None


class IssueEventMilestone(BaseModel):
    """
    Issue Event Milestone
    """

    title: str


class IssueEventProjectCard(BaseModel):
    """
    Issue Event Project Card
    """

    url: AnyUrl
    id: int
    project_url: AnyUrl
    project_id: int
    column_name: str
    previous_column_name: Optional[str] = None


class IssueEventRename(BaseModel):
    """
    Issue Event Rename
    """

    from_: str = Field(..., alias='from')
    to: str


class IssueEvent(BaseModel):
    """
    Issue Event
    """

    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDEwOklzc3VlRXZlbnQx')
    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/issues/events/1'
    )
    actor: NullableSimpleUser
    event: str = Field(..., example='closed')
    commit_id: str = Field(..., example='6dcb09b5b57875f334f61aebed695e2e4193db5e')
    commit_url: str = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    created_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    issue: Optional[NullableIssue] = None
    label: Optional[IssueEventLabel] = None
    assignee: Optional[NullableSimpleUser] = None
    assigner: Optional[NullableSimpleUser] = None
    review_requester: Optional[NullableSimpleUser] = None
    requested_reviewer: Optional[NullableSimpleUser] = None
    requested_team: Optional[Team1] = None
    dismissed_review: Optional[IssueEventDismissedReview] = None
    milestone: Optional[IssueEventMilestone] = None
    project_card: Optional[IssueEventProjectCard] = None
    rename: Optional[IssueEventRename] = None
    author_association: Optional[AuthorAssociation] = None
    lock_reason: Optional[str] = None
    performed_via_github_app: Optional[NullableIntegration] = None


class Label3(BaseModel):
    name: str
    color: str


class LabeledIssueEvent(BaseModel):
    """
    Labeled Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    label: Label3


class Label4(Label3):
    pass


class UnlabeledIssueEvent(BaseModel):
    """
    Unlabeled Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    label: Label4


class AssignedIssueEvent(BaseModel):
    """
    Assigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: Integration
    assignee: SimpleUser
    assigner: SimpleUser


class UnassignedIssueEvent(BaseModel):
    """
    Unassigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    assignee: SimpleUser
    assigner: SimpleUser


class Milestone(BaseModel):
    title: str


class MilestonedIssueEvent(BaseModel):
    """
    Milestoned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    milestone: Milestone


class Milestone1(Milestone):
    pass


class DemilestonedIssueEvent(BaseModel):
    """
    Demilestoned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    milestone: Milestone1


class Rename(BaseModel):
    from_: str = Field(..., alias='from')
    to: str


class RenamedIssueEvent(BaseModel):
    """
    Renamed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    rename: Rename


class ReviewRequestedIssueEvent(BaseModel):
    """
    Review Requested Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    review_requester: SimpleUser
    requested_team: Optional[Team1] = None
    requested_reviewer: Optional[SimpleUser] = None


class ReviewRequestRemovedIssueEvent(BaseModel):
    """
    Review Request Removed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    review_requester: SimpleUser
    requested_team: Optional[Team1] = None
    requested_reviewer: Optional[SimpleUser] = None


class DismissedReview(BaseModel):
    state: str
    review_id: int
    dismissal_message: str
    dismissal_commit_id: Optional[str] = None


class ReviewDismissedIssueEvent(BaseModel):
    """
    Review Dismissed Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    dismissed_review: DismissedReview


class LockedIssueEvent(BaseModel):
    """
    Locked Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    lock_reason: str = Field(..., example='"off-topic"')


class ProjectCard1(BaseModel):
    id: int
    url: AnyUrl
    project_id: int
    project_url: AnyUrl
    column_name: str
    previous_column_name: Optional[str] = None


class AddedToProjectIssueEvent(BaseModel):
    """
    Added to Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    project_card: Optional[ProjectCard1] = None


class ProjectCard2(ProjectCard1):
    pass


class MovedColumnInProjectIssueEvent(BaseModel):
    """
    Moved Column in Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    project_card: Optional[ProjectCard2] = None


class ProjectCard3(ProjectCard1):
    pass


class RemovedFromProjectIssueEvent(BaseModel):
    """
    Removed from Project Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    project_card: Optional[ProjectCard3] = None


class ProjectCard4(ProjectCard1):
    pass


class ConvertedNoteToIssueIssueEvent(BaseModel):
    """
    Converted Note to Issue Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: Integration
    project_card: Optional[ProjectCard4] = None


class IssueEventForIssue(BaseModel):
    __root__: Union[
        LabeledIssueEvent,
        UnlabeledIssueEvent,
        AssignedIssueEvent,
        UnassignedIssueEvent,
        MilestonedIssueEvent,
        DemilestonedIssueEvent,
        RenamedIssueEvent,
        ReviewRequestedIssueEvent,
        ReviewRequestRemovedIssueEvent,
        ReviewDismissedIssueEvent,
        LockedIssueEvent,
        AddedToProjectIssueEvent,
        MovedColumnInProjectIssueEvent,
        RemovedFromProjectIssueEvent,
        ConvertedNoteToIssueIssueEvent,
    ] = Field(..., description='Issue Event for Issue', title='Issue Event for Issue')


class Label5(BaseModel):
    """
    Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
    """

    id: int = Field(..., example=208045946)
    node_id: str = Field(..., example='MDU6TGFiZWwyMDgwNDU5NDY=')
    url: AnyUrl = Field(
        ...,
        description='URL for the label',
        example='https://api.github.com/repositories/42/labels/bug',
    )
    name: str = Field(..., description='The name of the label.', example='bug')
    description: str = Field(..., example="Something isn't working")
    color: str = Field(
        ...,
        description='6-character hex code, without the leading #, identifying the color',
        example='FFFFFF',
    )
    default: bool = Field(..., example=True)


class TimelineCommentEvent(BaseModel):
    """
    Timeline Comment Event
    """

    event: str
    actor: SimpleUser
    id: int = Field(..., description='Unique identifier of the issue comment', example=42)
    node_id: str
    url: AnyUrl = Field(
        ...,
        description='URL for the issue comment',
        example='https://api.github.com/repositories/42/issues/comments/1',
    )
    body: Optional[str] = Field(
        None,
        description='Contents of the issue comment',
        example='What version of Safari were you using when you observed this bug?',
    )
    body_text: Optional[str] = None
    body_html: Optional[str] = None
    html_url: AnyUrl
    user: SimpleUser
    created_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    updated_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    issue_url: AnyUrl
    author_association: AuthorAssociation
    performed_via_github_app: Optional[NullableIntegration] = None
    reactions: Optional[ReactionRollup] = None


class Source(BaseModel):
    type: Optional[str] = None
    issue: Optional[Issue] = None


class TimelineCrossReferencedEvent(BaseModel):
    """
    Timeline Cross Referenced Event
    """

    event: str
    actor: Optional[SimpleUser] = None
    created_at: datetime
    updated_at: datetime
    source: Source


class Author4(Author3):
    """
    Identifying information for the git-user
    """

    pass


class Committer4(Author3):
    """
    Identifying information for the git-user
    """

    pass


class Tree3(Tree2):
    pass


class Parent3(Parent2):
    pass


class Verification3(Verification2):
    pass


class TimelineCommittedEvent(BaseModel):
    """
    Timeline Committed Event
    """

    event: Optional[str] = None
    sha: str = Field(
        ..., description='SHA for the commit', example='7638417db6d59f3c431d3e1f261cc637155684cd'
    )
    node_id: str
    url: AnyUrl
    author: Author4 = Field(..., description='Identifying information for the git-user')
    committer: Committer4 = Field(..., description='Identifying information for the git-user')
    message: str = Field(
        ..., description='Message describing the purpose of the commit', example='Fix #42'
    )
    tree: Tree3
    parents: List[Parent3]
    verification: Verification3
    html_url: AnyUrl


class Html(BaseModel):
    href: str


class PullRequest2(Html):
    pass


class _Links10(BaseModel):
    html: Html
    pull_request: PullRequest2


class TimelineReviewedEvent(BaseModel):
    """
    Timeline Reviewed Event
    """

    event: str
    id: int = Field(..., description='Unique identifier of the review', example=42)
    node_id: str = Field(..., example='MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=')
    user: SimpleUser
    body: str = Field(..., description='The text of the review.', example='This looks great.')
    state: str = Field(..., example='CHANGES_REQUESTED')
    html_url: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80'
    )
    pull_request_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/12'
    )
    _links: _Links10
    submitted_at: Optional[datetime] = None
    commit_id: str = Field(
        ...,
        description='A commit SHA for the review.',
        example='54bb654c9e6025347f57900a4a5c2313a96b8035',
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    author_association: AuthorAssociation


class Self(BaseModel):
    href: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/comments/1'
    )


class Html1(BaseModel):
    href: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/pull/1#discussion-diff-1'
    )


class PullRequest3(BaseModel):
    href: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1')


class _Links11(BaseModel):
    self: Self
    html: Html1
    pull_request: PullRequest3


class StartSide(Enum):
    """
    The side of the first line of the range for a multi-line comment.
    """

    left = 'LEFT'
    right = 'RIGHT'


class PullRequestReviewComment(BaseModel):
    """
    Pull Request Review Comments are comments on a portion of the Pull Request's diff.
    """

    url: str = Field(
        ...,
        description='URL for the pull request review comment',
        example='https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
    )
    pull_request_review_id: int = Field(
        ...,
        description='The ID of the pull request review to which the comment belongs.',
        example=42,
    )
    id: int = Field(..., description='The ID of the pull request review comment.', example=1)
    node_id: str = Field(
        ...,
        description='The node ID of the pull request review comment.',
        example='MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw',
    )
    diff_hunk: str = Field(
        ...,
        description='The diff of the line that the comment refers to.',
        example='@@ -16,33 +16,40 @@ public class Connection : IConnection...',
    )
    path: str = Field(
        ...,
        description='The relative path of the file to which the comment applies.',
        example='config/database.yaml',
    )
    position: int = Field(
        ..., description='The line index in the diff to which the comment applies.', example=1
    )
    original_position: int = Field(
        ...,
        description='The index of the original line in the diff to which the comment applies.',
        example=4,
    )
    commit_id: str = Field(
        ...,
        description='The SHA of the commit to which the comment applies.',
        example='6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    original_commit_id: str = Field(
        ...,
        description='The SHA of the original commit to which the comment applies.',
        example='9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840',
    )
    in_reply_to_id: Optional[int] = Field(
        None, description='The comment ID to reply to.', example=8
    )
    user: SimpleUser
    body: str = Field(
        ...,
        description='The text of the comment.',
        example='We should probably include a check for null values here.',
    )
    created_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    updated_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    html_url: AnyUrl = Field(
        ...,
        description='HTML URL for the pull request review comment.',
        example='https://github.com/octocat/Hello-World/pull/1#discussion-diff-1',
    )
    pull_request_url: AnyUrl = Field(
        ...,
        description='URL for the pull request that the review comment belongs to.',
        example='https://api.github.com/repos/octocat/Hello-World/pulls/1',
    )
    author_association: AuthorAssociation
    _links: _Links11
    start_line: Optional[int] = Field(
        None, description='The first line of the range for a multi-line comment.', example=2
    )
    original_start_line: Optional[int] = Field(
        None, description='The first line of the range for a multi-line comment.', example=2
    )
    start_side: Optional[StartSide] = Field(
        'RIGHT', description='The side of the first line of the range for a multi-line comment.'
    )
    line: Optional[int] = Field(
        None,
        description='The line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        example=2,
    )
    original_line: Optional[int] = Field(
        None,
        description='The line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        example=2,
    )
    side: Optional[StartSide] = Field(
        'RIGHT',
        description='The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment',
    )
    reactions: Optional[ReactionRollup] = None
    body_html: Optional[str] = Field(None, example='"<p>comment body</p>"')
    body_text: Optional[str] = Field(None, example='"comment body"')


class TimelineLineCommentedEvent(BaseModel):
    """
    Timeline Line Commented Event
    """

    event: Optional[str] = None
    node_id: Optional[str] = None
    comments: Optional[List[PullRequestReviewComment]] = None


class TimelineCommitCommentedEvent(BaseModel):
    """
    Timeline Commit Commented Event
    """

    event: Optional[str] = None
    node_id: Optional[str] = None
    commit_id: Optional[str] = None
    comments: Optional[List[CommitComment]] = None


class TimelineAssignedIssueEvent(BaseModel):
    """
    Timeline Assigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    assignee: SimpleUser


class TimelineUnassignedIssueEvent(BaseModel):
    """
    Timeline Unassigned Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration
    assignee: SimpleUser


class StateChangeIssueEvent(BaseModel):
    """
    State Change Issue Event
    """

    id: int
    node_id: str
    url: str
    actor: SimpleUser
    event: str
    commit_id: str
    commit_url: str
    created_at: str
    performed_via_github_app: NullableIntegration


class TimelineIssueEvents(BaseModel):
    __root__: Union[
        LabeledIssueEvent,
        UnlabeledIssueEvent,
        MilestonedIssueEvent,
        DemilestonedIssueEvent,
        RenamedIssueEvent,
        ReviewRequestedIssueEvent,
        ReviewRequestRemovedIssueEvent,
        ReviewDismissedIssueEvent,
        LockedIssueEvent,
        AddedToProjectIssueEvent,
        MovedColumnInProjectIssueEvent,
        RemovedFromProjectIssueEvent,
        ConvertedNoteToIssueIssueEvent,
        TimelineCommentEvent,
        TimelineCrossReferencedEvent,
        TimelineCommittedEvent,
        TimelineReviewedEvent,
        TimelineLineCommentedEvent,
        TimelineCommitCommentedEvent,
        TimelineAssignedIssueEvent,
        TimelineUnassignedIssueEvent,
        StateChangeIssueEvent,
    ] = Field(..., description='Timeline Event', title='Timeline Event')


class DeployKey(BaseModel):
    """
    An SSH key granting access to a single repository.
    """

    id: int
    key: str
    url: str
    title: str
    verified: bool
    created_at: str
    read_only: bool


class Language(BaseModel):
    """
    Language
    """

    pass

    class Config:
        extra = Extra.allow


class _Links12(_Links3):
    pass


class LicenseContent(BaseModel):
    """
    License Content
    """

    name: str
    path: str
    sha: str
    size: int
    url: AnyUrl
    html_url: AnyUrl
    git_url: AnyUrl
    download_url: AnyUrl
    type: str
    content: str
    encoding: str
    _links: _Links12
    license: NullableLicenseSimple


class MergeType(Enum):
    merge = 'merge'
    fast_forward = 'fast-forward'
    none = 'none'


class MergedUpstream(BaseModel):
    """
    Results of a successful merge upstream request
    """

    message: Optional[str] = None
    merge_type: Optional[MergeType] = None
    base_branch: Optional[str] = None


class Milestone2(NullableMilestone):
    """
    A collection of related issues and pull requests.
    """

    pass


class PagesSourceHash(BaseModel):
    branch: str
    path: str


class State8(Enum):
    new = 'new'
    authorization_created = 'authorization_created'
    authorization_pending = 'authorization_pending'
    authorized = 'authorized'
    authorization_revoked = 'authorization_revoked'
    issued = 'issued'
    uploaded = 'uploaded'
    approved = 'approved'
    errored = 'errored'
    bad_authz = 'bad_authz'
    destroy_pending = 'destroy_pending'
    dns_changed = 'dns_changed'


class PagesHttpsCertificate(BaseModel):
    state: State8 = Field(..., example='approved')
    description: str = Field(..., example='Certificate is approved')
    domains: List[str] = Field(
        ...,
        description='Array of the domain set and its alternate name (if it is configured)',
        example=['example.com', 'www.example.com'],
    )
    expires_at: Optional[date] = None


class Status10(Enum):
    """
    The status of the most recent build of the Page.
    """

    built = 'built'
    building = 'building'
    errored = 'errored'


class ProtectedDomainState(Enum):
    """
    The state if the domain is verified
    """

    pending = 'pending'
    verified = 'verified'
    unverified = 'unverified'


class Page1(BaseModel):
    """
    The configuration for GitHub Pages for a repository.
    """

    url: AnyUrl = Field(
        ...,
        description='The API address for accessing this Page resource.',
        example='https://api.github.com/repos/github/hello-world/pages',
    )
    status: Status10 = Field(
        ..., description='The status of the most recent build of the Page.', example='built'
    )
    cname: str = Field(..., description="The Pages site's custom domain", example='example.com')
    protected_domain_state: Optional[ProtectedDomainState] = Field(
        None, description='The state if the domain is verified', example='pending'
    )
    pending_domain_unverified_at: Optional[datetime] = Field(
        None, description='The timestamp when a pending domain becomes unverified.'
    )
    custom_404: Optional[bool] = Field(
        False, description='Whether the Page has a custom 404 page.', example=False
    )
    html_url: Optional[AnyUrl] = Field(
        None,
        description='The web address the Page can be accessed from.',
        example='https://example.com',
    )
    source: Optional[PagesSourceHash] = None
    public: bool = Field(
        ...,
        description='Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.',
        example=True,
    )
    https_certificate: Optional[PagesHttpsCertificate] = None
    https_enforced: Optional[bool] = Field(
        None, description='Whether https is enabled on the domain', example=True
    )


class Error2(BaseModel):
    message: str


class PageBuild(BaseModel):
    """
    Page Build
    """

    url: AnyUrl
    status: str
    error: Error2
    pusher: NullableSimpleUser
    commit: str
    duration: int
    created_at: datetime
    updated_at: datetime


class PageBuildStatus(BaseModel):
    """
    Page Build Status
    """

    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/github/hello-world/pages/builds/latest'
    )
    status: str = Field(..., example='queued')


class Domain(BaseModel):
    host: Optional[str] = None
    uri: Optional[str] = None
    nameservers: Optional[str] = None
    dns_resolves: Optional[bool] = None
    is_proxied: Optional[bool] = None
    is_cloudflare_ip: Optional[bool] = None
    is_fastly_ip: Optional[bool] = None
    is_old_ip_address: Optional[bool] = None
    is_a_record: Optional[bool] = None
    has_cname_record: Optional[bool] = None
    has_mx_records_present: Optional[bool] = None
    is_valid_domain: Optional[bool] = None
    is_apex_domain: Optional[bool] = None
    should_be_a_record: Optional[bool] = None
    is_cname_to_github_user_domain: Optional[bool] = None
    is_cname_to_pages_dot_github_dot_com: Optional[bool] = None
    is_cname_to_fastly: Optional[bool] = None
    is_pointed_to_github_pages_ip: Optional[bool] = None
    is_non_github_pages_ip_present: Optional[bool] = None
    is_pages_domain: Optional[bool] = None
    is_served_by_pages: Optional[bool] = None
    is_valid: Optional[bool] = None
    reason: Optional[str] = None
    responds_to_https: Optional[bool] = None
    enforces_https: Optional[bool] = None
    https_error: Optional[str] = None
    is_https_eligible: Optional[bool] = None
    caa_error: Optional[str] = None


class AltDomain(Domain):
    pass


class PagesHealthCheck(BaseModel):
    """
    Pages Health Check Status
    """

    domain: Optional[Domain] = None
    alt_domain: Optional[AltDomain] = None


class TeamSimple(NullableTeamSimple):
    """
    Groups of organization members that gives permissions on specified repositories.
    """

    pass


class Label6(Label1):
    pass


class Owner3(BaseModel):
    avatar_url: AnyUrl
    events_url: str
    followers_url: AnyUrl
    following_url: str
    gists_url: str
    gravatar_id: str
    html_url: AnyUrl
    id: int
    node_id: str
    login: str
    organizations_url: AnyUrl
    received_events_url: AnyUrl
    repos_url: AnyUrl
    site_admin: bool
    starred_url: str
    subscriptions_url: AnyUrl
    type: str
    url: AnyUrl


class Permissions17(Permissions12):
    pass


class License3(BaseModel):
    key: str
    name: str
    url: AnyUrl
    spdx_id: str
    node_id: str


class Repo3(BaseModel):
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    deployments_url: AnyUrl
    description: str
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: AnyUrl
    merges_url: AnyUrl
    milestones_url: str
    name: str
    notifications_url: str
    owner: Owner3
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    trees_url: str
    url: AnyUrl
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    homepage: AnyUrl
    language: str
    master_branch: Optional[str] = None
    archived: bool
    disabled: bool
    visibility: Optional[str] = Field(
        None, description='The repository visibility: public, private, or internal.'
    )
    mirror_url: AnyUrl
    open_issues: int
    open_issues_count: int
    permissions: Optional[Permissions17] = None
    temp_clone_token: Optional[str] = None
    allow_merge_commit: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    license: License3
    pushed_at: datetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: AnyUrl
    topics: Optional[List[str]] = None
    watchers: int
    watchers_count: int
    created_at: datetime
    updated_at: datetime
    allow_forking: Optional[bool] = None
    is_template: Optional[bool] = None


class User1(Owner3):
    pass


class Head2(BaseModel):
    label: str
    ref: str
    repo: Repo3
    sha: str
    user: User1


class Owner4(Owner3):
    pass


class Permissions18(Permissions12):
    pass


class Repo4(BaseModel):
    archive_url: str
    assignees_url: str
    blobs_url: str
    branches_url: str
    collaborators_url: str
    comments_url: str
    commits_url: str
    compare_url: str
    contents_url: str
    contributors_url: AnyUrl
    deployments_url: AnyUrl
    description: str
    downloads_url: AnyUrl
    events_url: AnyUrl
    fork: bool
    forks_url: AnyUrl
    full_name: str
    git_commits_url: str
    git_refs_url: str
    git_tags_url: str
    hooks_url: AnyUrl
    html_url: AnyUrl
    id: int
    is_template: Optional[bool] = None
    node_id: str
    issue_comment_url: str
    issue_events_url: str
    issues_url: str
    keys_url: str
    labels_url: str
    languages_url: AnyUrl
    merges_url: AnyUrl
    milestones_url: str
    name: str
    notifications_url: str
    owner: Owner4
    private: bool
    pulls_url: str
    releases_url: str
    stargazers_url: AnyUrl
    statuses_url: str
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    tags_url: AnyUrl
    teams_url: AnyUrl
    trees_url: str
    url: AnyUrl
    clone_url: str
    default_branch: str
    forks: int
    forks_count: int
    git_url: str
    has_downloads: bool
    has_issues: bool
    has_projects: bool
    has_wiki: bool
    has_pages: bool
    homepage: AnyUrl
    language: str
    master_branch: Optional[str] = None
    archived: bool
    disabled: bool
    visibility: Optional[str] = Field(
        None, description='The repository visibility: public, private, or internal.'
    )
    mirror_url: AnyUrl
    open_issues: int
    open_issues_count: int
    permissions: Optional[Permissions18] = None
    temp_clone_token: Optional[str] = None
    allow_merge_commit: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    license: NullableLicenseSimple
    pushed_at: datetime
    size: int
    ssh_url: str
    stargazers_count: int
    svn_url: AnyUrl
    topics: Optional[List[str]] = None
    watchers: int
    watchers_count: int
    created_at: datetime
    updated_at: datetime
    allow_forking: Optional[bool] = None


class User2(Owner3):
    pass


class Base2(BaseModel):
    label: str
    ref: str
    repo: Repo4
    sha: str
    user: User2


class _Links13(_Links2):
    pass


class PullRequest4(BaseModel):
    """
    Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
    """

    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1347')
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDExOlB1bGxSZXF1ZXN0MQ==')
    html_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/pull/1347')
    diff_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/pull/1347.diff')
    patch_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/pull/1347.patch')
    issue_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/issues/1347'
    )
    commits_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits'
    )
    review_comments_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments'
    )
    review_comment_url: str = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}'
    )
    comments_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/issues/1347/comments'
    )
    statuses_url: AnyUrl = Field(
        ...,
        example='https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
    )
    number: int = Field(
        ...,
        description='Number uniquely identifying the pull request within its repository.',
        example=42,
    )
    state: State = Field(
        ..., description='State of this Pull Request. Either `open` or `closed`.', example='open'
    )
    locked: bool = Field(..., example=True)
    title: str = Field(
        ..., description='The title of the pull request.', example='Amazing new feature'
    )
    user: NullableSimpleUser
    body: str = Field(..., example='Please pull these awesome changes')
    labels: List[Label6]
    milestone: NullableMilestone
    active_lock_reason: Optional[str] = Field(None, example='too heated')
    created_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    updated_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    closed_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    merged_at: datetime = Field(..., example='2011-01-26T19:01:12Z')
    merge_commit_sha: str = Field(..., example='e5bd3914e2e596debea16f433f57875b5b90bcd6')
    assignee: NullableSimpleUser
    assignees: Optional[List[SimpleUser]] = None
    requested_reviewers: Optional[List[SimpleUser]] = None
    requested_teams: Optional[List[TeamSimple]] = None
    head: Head2
    base: Base2
    _links: _Links13
    author_association: AuthorAssociation
    auto_merge: AutoMerge
    draft: Optional[bool] = Field(
        None, description='Indicates whether or not the pull request is a draft.', example=False
    )
    merged: bool
    mergeable: bool = Field(..., example=True)
    rebaseable: Optional[bool] = Field(None, example=True)
    mergeable_state: str = Field(..., example='clean')
    merged_by: NullableSimpleUser
    comments: int = Field(..., example=10)
    review_comments: int = Field(..., example=0)
    maintainer_can_modify: bool = Field(
        ..., description='Indicates whether maintainers can modify the pull request.', example=True
    )
    commits: int = Field(..., example=3)
    additions: int = Field(..., example=100)
    deletions: int = Field(..., example=3)
    changed_files: int = Field(..., example=5)


class PullRequestMergeResult(BaseModel):
    """
    Pull Request Merge Result
    """

    sha: str
    merged: bool
    message: str


class PullRequestReviewRequest(BaseModel):
    """
    Pull Request Review Request
    """

    users: List[SimpleUser]
    teams: List[Team1]


class Html2(Html):
    pass


class PullRequest5(Html):
    pass


class _Links14(BaseModel):
    html: Html2
    pull_request: PullRequest5


class PullRequestReview(BaseModel):
    """
    Pull Request Reviews are reviews on pull requests.
    """

    id: int = Field(..., description='Unique identifier of the review', example=42)
    node_id: str = Field(..., example='MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=')
    user: NullableSimpleUser
    body: str = Field(..., description='The text of the review.', example='This looks great.')
    state: str = Field(..., example='CHANGES_REQUESTED')
    html_url: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80'
    )
    pull_request_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/12'
    )
    _links: _Links14
    submitted_at: Optional[datetime] = None
    commit_id: str = Field(
        ...,
        description='A commit SHA for the review.',
        example='54bb654c9e6025347f57900a4a5c2313a96b8035',
    )
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    author_association: AuthorAssociation


class _Links15(BaseModel):
    self: Link
    html: Link
    pull_request: Link


class ReviewComment(BaseModel):
    """
    Legacy Review Comment
    """

    url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/comments/1'
    )
    pull_request_review_id: int = Field(..., example=42)
    id: int = Field(..., example=10)
    node_id: str = Field(..., example='MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw')
    diff_hunk: str = Field(
        ..., example='@@ -16,33 +16,40 @@ public class Connection : IConnection...'
    )
    path: str = Field(..., example='file1.txt')
    position: int = Field(..., example=1)
    original_position: int = Field(..., example=4)
    commit_id: str = Field(..., example='6dcb09b5b57875f334f61aebed695e2e4193db5e')
    original_commit_id: str = Field(..., example='9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840')
    in_reply_to_id: Optional[int] = Field(None, example=8)
    user: NullableSimpleUser
    body: str = Field(..., example='Great stuff')
    created_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    updated_at: datetime = Field(..., example='2011-04-14T16:00:49Z')
    html_url: AnyUrl = Field(
        ..., example='https://github.com/octocat/Hello-World/pull/1#discussion-diff-1'
    )
    pull_request_url: AnyUrl = Field(
        ..., example='https://api.github.com/repos/octocat/Hello-World/pulls/1'
    )
    author_association: AuthorAssociation
    _links: _Links15
    body_text: Optional[str] = None
    body_html: Optional[str] = None
    reactions: Optional[ReactionRollup] = None
    side: Optional[StartSide] = Field(
        'RIGHT', description='The side of the first line of the range for a multi-line comment.'
    )
    start_side: Optional[StartSide] = Field(
        'RIGHT', description='The side of the first line of the range for a multi-line comment.'
    )
    line: Optional[int] = Field(
        None,
        description='The line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        example=2,
    )
    original_line: Optional[int] = Field(
        None,
        description='The original line of the blob to which the comment applies. The last line of the range for a multi-line comment',
        example=2,
    )
    start_line: Optional[int] = Field(
        None, description='The first line of the range for a multi-line comment.', example=2
    )
    original_start_line: Optional[int] = Field(
        None,
        description='The original first line of the range for a multi-line comment.',
        example=2,
    )


class State10(Enum):
    """
    State of the release asset.
    """

    uploaded = 'uploaded'
    open = 'open'


class ReleaseAsset(BaseModel):
    """
    Data related to a release.
    """

    url: AnyUrl
    browser_download_url: AnyUrl
    id: int
    node_id: str
    name: str = Field(..., description='The file name of the asset.', example='Team Environment')
    label: str
    state: State10 = Field(..., description='State of the release asset.')
    content_type: str
    size: int
    download_count: int
    created_at: datetime
    updated_at: datetime
    uploader: NullableSimpleUser


class Release(BaseModel):
    """
    A release.
    """

    url: AnyUrl
    html_url: AnyUrl
    assets_url: AnyUrl
    upload_url: str
    tarball_url: AnyUrl
    zipball_url: AnyUrl
    id: int
    node_id: str
    tag_name: str = Field(..., description='The name of the tag.', example='v1.0.0')
    target_commitish: str = Field(
        ...,
        description='Specifies the commitish value that determines where the Git tag is created from.',
        example='master',
    )
    name: str
    body: Optional[str] = None
    draft: bool = Field(
        ...,
        description='true to create a draft (unpublished) release, false to create a published one.',
        example=False,
    )
    prerelease: bool = Field(
        ...,
        description='Whether to identify the release as a prerelease or a full release.',
        example=False,
    )
    created_at: datetime
    published_at: datetime
    author: SimpleUser
    assets: List[ReleaseAsset]
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    mentions_count: Optional[int] = None
    discussion_url: Optional[AnyUrl] = Field(None, description='The URL of the release discussion.')
    reactions: Optional[ReactionRollup] = None


class ReleaseNotesContent(BaseModel):
    """
    Generated name and body describing a release
    """

    name: str = Field(
        ...,
        description='The generated name of the release',
        example='Release v1.0.0 is now available!',
    )
    body: str = Field(
        ...,
        description='The generated body describing the contents of the release supporting markdown formatting',
    )


class SecretScanningAlert(BaseModel):
    number: Optional[AlertNumber] = None
    created_at: Optional[AlertCreatedAt] = None
    url: Optional[AlertUrl] = None
    html_url: Optional[AlertHtmlUrl] = None
    locations_url: Optional[AnyUrl] = Field(
        None, description='The REST API URL of the code locations for this alert.'
    )
    state: Optional[SecretScanningAlertState] = None
    resolution: Optional[SecretScanningAlertResolution] = None
    resolved_at: Optional[datetime] = Field(
        None,
        description='The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.',
    )
    resolved_by: Optional[NullableSimpleUser] = None
    secret_type: Optional[str] = Field(
        None, description='The type of secret that secret scanning detected.'
    )
    secret: Optional[str] = Field(None, description='The secret that was detected.')


class SecretScanningLocationCommit(BaseModel):
    """
    Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
    """

    path: str = Field(
        ..., description='The file path in the repository', example='/example/secrets.txt'
    )
    start_line: float = Field(..., description='Line number at which the secret starts in the file')
    end_line: float = Field(..., description='Line number at which the secret ends in the file')
    start_column: float = Field(
        ...,
        description='The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII',
    )
    end_column: float = Field(
        ...,
        description='The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII',
    )
    blob_sha: str = Field(
        ...,
        description='SHA-1 hash ID of the associated blob',
        example='af5626b4a114abcb82d63db7c8082c3c4756e51b',
    )
    blob_url: str = Field(..., description='The API URL to get the associated blob resource')
    commit_sha: str = Field(
        ...,
        description='SHA-1 hash ID of the associated commit',
        example='af5626b4a114abcb82d63db7c8082c3c4756e51b',
    )
    commit_url: str = Field(..., description='The API URL to get the associated commit resource')


class Type1(Enum):
    """
    The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
    """

    commit = 'commit'


class SecretScanningLocation(BaseModel):
    type: Type1 = Field(
        ...,
        description='The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.',
        example='commit',
    )
    details: SecretScanningLocationCommit


class Stargazer(BaseModel):
    """
    Stargazer
    """

    starred_at: datetime
    user: NullableSimpleUser


class CodeFrequencyStat(BaseModel):
    """
    Code Frequency Stat
    """

    __root__: List[int] = Field(..., description='Code Frequency Stat', title='Code Frequency Stat')


class CommitActivity(BaseModel):
    """
    Commit Activity
    """

    days: List[int] = Field(..., example=[0, 3, 26, 20, 39, 1, 0])
    total: int = Field(..., example=89)
    week: int = Field(..., example=1336280400)


class Week(BaseModel):
    w: Optional[int] = None
    a: Optional[int] = None
    d: Optional[int] = None
    c: Optional[int] = None


class ContributorActivity(BaseModel):
    """
    Contributor Activity
    """

    author: NullableSimpleUser
    total: int = Field(..., example=135)
    weeks: List[Week] = Field(..., example=[{'w': '1367712000', 'a': 6898, 'd': 77, 'c': 10}])


class ParticipationStats(BaseModel):
    all: List[int]
    owner: List[int]


class RepositorySubscription(BaseModel):
    """
    Repository invitations let you manage who you collaborate with.
    """

    subscribed: bool = Field(
        ...,
        description='Determines if notifications should be received from this repository.',
        example=True,
    )
    ignored: bool = Field(
        ..., description='Determines if all notifications should be blocked from this repository.'
    )
    reason: str
    created_at: datetime = Field(..., example='2012-10-06T21:34:12Z')
    url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example/subscription')
    repository_url: AnyUrl = Field(..., example='https://api.github.com/repos/octocat/example')


class Commit5(Commit):
    pass


class Tag(BaseModel):
    """
    Tag
    """

    name: str = Field(..., example='v0.1')
    commit: Commit5
    zipball_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/zipball/v0.1')
    tarball_url: AnyUrl = Field(..., example='https://github.com/octocat/Hello-World/tarball/v0.1')
    node_id: str


class Topic(BaseModel):
    """
    A topic aggregates entities that are related to a subject.
    """

    names: List[str]


class Traffic(BaseModel):
    timestamp: datetime
    uniques: int
    count: int


class CloneTraffic(BaseModel):
    """
    Clone Traffic
    """

    count: int = Field(..., example=173)
    uniques: int = Field(..., example=128)
    clones: List[Traffic]


class ContentTraffic(BaseModel):
    """
    Content Traffic
    """

    path: str = Field(..., example='/github/hubot')
    title: str = Field(..., example='github/hubot: A customizable life embetterment robot.')
    count: int = Field(..., example=3542)
    uniques: int = Field(..., example=2225)


class ReferrerTraffic(BaseModel):
    """
    Referrer Traffic
    """

    referrer: str = Field(..., example='Google')
    count: int = Field(..., example=4)
    uniques: int = Field(..., example=3)


class ViewTraffic(BaseModel):
    """
    View Traffic
    """

    count: int = Field(..., example=14850)
    uniques: int = Field(..., example=3782)
    views: List[Traffic]


class Member1(BaseModel):
    value: Optional[str] = None
    _ref: Optional[str] = Field(None, alias='$ref')
    display: Optional[str] = None


class Meta(BaseModel):
    resource_type: Optional[str] = Field(None, alias='resourceType')
    created: Optional[str] = None
    last_modified: Optional[str] = Field(None, alias='lastModified')
    location: Optional[str] = None


class Resource(BaseModel):
    schemas: List[str]
    id: str
    external_id: Optional[str] = Field(None, alias='externalId')
    display_name: Optional[str] = Field(None, alias='displayName')
    members: Optional[List[Member1]] = None
    meta: Optional[Meta] = None


class ScimGroupListEnterprise(BaseModel):
    schemas: List[str]
    total_results: float = Field(..., alias='totalResults')
    items_per_page: float = Field(..., alias='itemsPerPage')
    start_index: float = Field(..., alias='startIndex')
    resources: List[Resource] = Field(..., alias='Resources')


class Member2(Member1):
    pass


class Meta1(Meta):
    pass


class ScimEnterpriseGroup(BaseModel):
    schemas: List[str]
    id: str
    external_id: Optional[str] = Field(None, alias='externalId')
    display_name: Optional[str] = Field(None, alias='displayName')
    members: Optional[List[Member2]] = None
    meta: Optional[Meta1] = None


class Name(BaseModel):
    given_name: Optional[str] = Field(None, alias='givenName')
    family_name: Optional[str] = Field(None, alias='familyName')


class Email(BaseModel):
    value: Optional[str] = None
    primary: Optional[bool] = None
    type: Optional[str] = None


class Group2(BaseModel):
    value: Optional[str] = None


class Meta2(Meta):
    pass


class Resource1(BaseModel):
    schemas: List[str]
    id: str
    external_id: Optional[str] = Field(None, alias='externalId')
    user_name: Optional[str] = Field(None, alias='userName')
    name: Optional[Name] = None
    emails: Optional[List[Email]] = None
    groups: Optional[List[Group2]] = None
    active: Optional[bool] = None
    meta: Optional[Meta2] = None


class ScimUserListEnterprise(BaseModel):
    schemas: List[str]
    total_results: float = Field(..., alias='totalResults')
    items_per_page: float = Field(..., alias='itemsPerPage')
    start_index: float = Field(..., alias='startIndex')
    resources: List[Resource1] = Field(..., alias='Resources')


class Name1(Name):
    pass


class Email1(BaseModel):
    value: Optional[str] = None
    type: Optional[str] = None
    primary: Optional[bool] = None


class Group3(Group2):
    pass


class Meta3(Meta):
    pass


class ScimEnterpriseUser(BaseModel):
    schemas: List[str]
    id: str
    external_id: Optional[str] = Field(None, alias='externalId')
    user_name: Optional[str] = Field(None, alias='userName')
    name: Optional[Name1] = None
    emails: Optional[List[Email1]] = None
    groups: Optional[List[Group3]] = None
    active: Optional[bool] = None
    meta: Optional[Meta3] = None


class Name2(BaseModel):
    given_name: str = Field(..., alias='givenName')
    family_name: str = Field(..., alias='familyName')
    formatted: Optional[str] = None


class Email2(BaseModel):
    value: str
    primary: Optional[bool] = None


class Meta4(BaseModel):
    resource_type: Optional[str] = Field(None, alias='resourceType', example='User')
    created: Optional[datetime] = Field(None, example='2019-01-24T22:45:36.000Z')
    last_modified: Optional[datetime] = Field(
        None, alias='lastModified', example='2019-01-24T22:45:36.000Z'
    )
    location: Optional[AnyUrl] = Field(
        None,
        example='https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d',
    )


class Op(Enum):
    add = 'add'
    remove = 'remove'
    replace = 'replace'


class Operation(BaseModel):
    op: Op
    path: Optional[str] = None
    value: Optional[Union[str, Dict[str, Any], List]] = None


class Group4(BaseModel):
    value: Optional[str] = None
    display: Optional[str] = None


class ScimUser(BaseModel):
    """
    SCIM /Users provisioning endpoints
    """

    schemas: List[str] = Field(..., description='SCIM schema used.', min_items=1)
    id: str = Field(
        ...,
        description='Unique identifier of an external identity',
        example='1b78eada-9baa-11e6-9eb6-a431576d590e',
    )
    external_id: str = Field(
        ..., alias='externalId', description='The ID of the User.', example='a7b0f98395'
    )
    user_name: str = Field(
        ...,
        alias='userName',
        description='Configured by the admin. Could be an email, login, or username',
        example='someone@example.com',
    )
    display_name: Optional[str] = Field(
        None,
        alias='displayName',
        description='The name of the user, suitable for display to end-users',
        example='Jon Doe',
    )
    name: Name2 = Field(..., example={'givenName': 'Jane', 'familyName': 'User'})
    emails: List[Email2] = Field(
        ...,
        description='user emails',
        example=[
            {'value': 'someone@example.com', 'primary': True},
            {'value': 'another@example.com', 'primary': False},
        ],
        min_items=1,
    )
    active: bool = Field(..., description='The active status of the User.', example=True)
    meta: Meta4
    organization_id: Optional[int] = Field(None, description='The ID of the organization.')
    operations: Optional[List[Operation]] = Field(
        None,
        description='Set of operations to be performed',
        example=[{'op': 'replace', 'value': {'active': False}}],
        min_items=1,
    )
    groups: Optional[List[Group4]] = Field(None, description='associated groups')


class ScimUserList(BaseModel):
    """
    SCIM User List
    """

    schemas: List[str] = Field(..., description='SCIM schema used.', min_items=1)
    total_results: int = Field(..., alias='totalResults', example=3)
    items_per_page: int = Field(..., alias='itemsPerPage', example=10)
    start_index: int = Field(..., alias='startIndex', example=1)
    resources: List[ScimUser] = Field(..., alias='Resources')


class Match(BaseModel):
    text: Optional[str] = None
    indices: Optional[List[int]] = None


class SearchResultTextMatch(BaseModel):
    object_url: Optional[str] = None
    object_type: Optional[str] = None
    property: Optional[str] = None
    fragment: Optional[str] = None
    matches: Optional[List[Match]] = None


class SearchResultTextMatches(BaseModel):
    __root__: List[SearchResultTextMatch] = Field(..., title='Search Result Text Matches')


class CodeSearchResultItem(BaseModel):
    """
    Code Search Result Item
    """

    name: str
    path: str
    sha: str
    url: AnyUrl
    git_url: AnyUrl
    html_url: AnyUrl
    repository: MinimalRepository
    score: float
    file_size: Optional[int] = None
    language: Optional[str] = None
    last_modified_at: Optional[datetime] = None
    line_numbers: Optional[List[str]] = Field(None, example=['73..77', '77..78'])
    text_matches: Optional[SearchResultTextMatches] = None


class Author5(BaseModel):
    name: str
    email: str
    date: datetime


class Tree4(Commit):
    pass


class Commit6(BaseModel):
    author: Author5
    committer: NullableGitUser
    comment_count: int
    message: str
    tree: Tree4
    url: AnyUrl
    verification: Optional[Verification] = None


class Parent4(Parent1):
    pass


class CommitSearchResultItem(BaseModel):
    """
    Commit Search Result Item
    """

    url: AnyUrl
    sha: str
    html_url: AnyUrl
    comments_url: AnyUrl
    commit: Commit6
    author: NullableSimpleUser
    committer: NullableGitUser
    parents: List[Parent4]
    repository: MinimalRepository
    score: float
    node_id: str
    text_matches: Optional[SearchResultTextMatches] = None


class Label7(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    name: Optional[str] = None
    color: Optional[str] = None
    default: Optional[bool] = None
    description: Optional[str] = None


class PullRequest6(PullRequest):
    pass


class IssueSearchResultItem(BaseModel):
    """
    Issue Search Result Item
    """

    url: AnyUrl
    repository_url: AnyUrl
    labels_url: str
    comments_url: AnyUrl
    events_url: AnyUrl
    html_url: AnyUrl
    id: int
    node_id: str
    number: int
    title: str
    locked: bool
    active_lock_reason: Optional[str] = None
    assignees: Optional[List[SimpleUser]] = None
    user: NullableSimpleUser
    labels: List[Label7]
    state: str
    assignee: NullableSimpleUser
    milestone: NullableMilestone
    comments: int
    created_at: datetime
    updated_at: datetime
    closed_at: datetime
    text_matches: Optional[SearchResultTextMatches] = None
    pull_request: Optional[PullRequest6] = None
    body: Optional[str] = None
    score: float
    author_association: AuthorAssociation
    draft: Optional[bool] = None
    repository: Optional[Repository] = None
    body_html: Optional[str] = None
    body_text: Optional[str] = None
    timeline_url: Optional[AnyUrl] = None
    performed_via_github_app: Optional[NullableIntegration] = None
    reactions: Optional[ReactionRollup] = None


class LabelSearchResultItem(BaseModel):
    """
    Label Search Result Item
    """

    id: int
    node_id: str
    url: AnyUrl
    name: str
    color: str
    default: bool
    description: str
    score: float
    text_matches: Optional[SearchResultTextMatches] = None


class Permissions19(Permissions12):
    pass


class RepoSearchResultItem(BaseModel):
    """
    Repo Search Result Item
    """

    id: int
    node_id: str
    name: str
    full_name: str
    owner: NullableSimpleUser
    private: bool
    html_url: AnyUrl
    description: str
    fork: bool
    url: AnyUrl
    created_at: datetime
    updated_at: datetime
    pushed_at: datetime
    homepage: AnyUrl
    size: int
    stargazers_count: int
    watchers_count: int
    language: str
    forks_count: int
    open_issues_count: int
    master_branch: Optional[str] = None
    default_branch: str
    score: float
    forks_url: AnyUrl
    keys_url: str
    collaborators_url: str
    teams_url: AnyUrl
    hooks_url: AnyUrl
    issue_events_url: str
    events_url: AnyUrl
    assignees_url: str
    branches_url: str
    tags_url: AnyUrl
    blobs_url: str
    git_tags_url: str
    git_refs_url: str
    trees_url: str
    statuses_url: str
    languages_url: AnyUrl
    stargazers_url: AnyUrl
    contributors_url: AnyUrl
    subscribers_url: AnyUrl
    subscription_url: AnyUrl
    commits_url: str
    git_commits_url: str
    comments_url: str
    issue_comment_url: str
    contents_url: str
    compare_url: str
    merges_url: AnyUrl
    archive_url: str
    downloads_url: AnyUrl
    issues_url: str
    pulls_url: str
    milestones_url: str
    notifications_url: str
    labels_url: str
    releases_url: str
    deployments_url: AnyUrl
    git_url: str
    ssh_url: str
    clone_url: str
    svn_url: AnyUrl
    forks: int
    open_issues: int
    watchers: int
    topics: Optional[List[str]] = None
    mirror_url: AnyUrl
    has_issues: bool
    has_projects: bool
    has_pages: bool
    has_wiki: bool
    has_downloads: bool
    archived: bool
    disabled: bool = Field(..., description='Returns whether or not this repository disabled.')
    visibility: Optional[str] = Field(
        None, description='The repository visibility: public, private, or internal.'
    )
    license: NullableLicenseSimple
    permissions: Optional[Permissions19] = None
    text_matches: Optional[SearchResultTextMatches] = None
    temp_clone_token: Optional[str] = None
    allow_merge_commit: Optional[bool] = None
    allow_squash_merge: Optional[bool] = None
    allow_rebase_merge: Optional[bool] = None
    allow_auto_merge: Optional[bool] = None
    delete_branch_on_merge: Optional[bool] = None
    allow_forking: Optional[bool] = None
    is_template: Optional[bool] = None


class TopicRelation(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    topic_id: Optional[int] = None
    relation_type: Optional[str] = None


class RelatedItem(BaseModel):
    topic_relation: Optional[TopicRelation] = None


class TopicRelation1(TopicRelation):
    pass


class Alias(BaseModel):
    topic_relation: Optional[TopicRelation1] = None


class TopicSearchResultItem(BaseModel):
    """
    Topic Search Result Item
    """

    name: str
    display_name: str
    short_description: str
    description: str
    created_by: str
    released: str
    created_at: datetime
    updated_at: datetime
    featured: bool
    curated: bool
    score: float
    repository_count: Optional[int] = None
    logo_url: Optional[AnyUrl] = None
    text_matches: Optional[SearchResultTextMatches] = None
    related: Optional[List[RelatedItem]] = None
    aliases: Optional[List[Alias]] = None


class UserSearchResultItem(BaseModel):
    """
    User Search Result Item
    """

    login: str
    id: int
    node_id: str
    avatar_url: AnyUrl
    gravatar_id: str
    url: AnyUrl
    html_url: AnyUrl
    followers_url: AnyUrl
    subscriptions_url: AnyUrl
    organizations_url: AnyUrl
    repos_url: AnyUrl
    received_events_url: AnyUrl
    type: str
    score: float
    following_url: str
    gists_url: str
    starred_url: str
    events_url: str
    public_repos: Optional[int] = None
    public_gists: Optional[int] = None
    followers: Optional[int] = None
    following: Optional[int] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    name: Optional[str] = None
    bio: Optional[str] = None
    email: Optional[EmailStr] = None
    location: Optional[str] = None
    site_admin: bool
    hireable: Optional[bool] = None
    text_matches: Optional[SearchResultTextMatches] = None
    blog: Optional[str] = None
    company: Optional[str] = None
    suspended_at: Optional[datetime] = None


class Plan2(Plan):
    pass


class PrivateUser(BaseModel):
    """
    Private User
    """

    login: str = Field(..., example='octocat')
    id: int = Field(..., example=1)
    node_id: str = Field(..., example='MDQ6VXNlcjE=')
    avatar_url: AnyUrl = Field(..., example='https://github.com/images/error/octocat_happy.gif')
    gravatar_id: str = Field(..., example='41d064eb2195891e12d0413f63227ea7')
    url: AnyUrl = Field(..., example='https://api.github.com/users/octocat')
    html_url: AnyUrl = Field(..., example='https://github.com/octocat')
    followers_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/followers')
    following_url: str = Field(
        ..., example='https://api.github.com/users/octocat/following{/other_user}'
    )
    gists_url: str = Field(..., example='https://api.github.com/users/octocat/gists{/gist_id}')
    starred_url: str = Field(
        ..., example='https://api.github.com/users/octocat/starred{/owner}{/repo}'
    )
    subscriptions_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/subscriptions'
    )
    organizations_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/orgs')
    repos_url: AnyUrl = Field(..., example='https://api.github.com/users/octocat/repos')
    events_url: str = Field(..., example='https://api.github.com/users/octocat/events{/privacy}')
    received_events_url: AnyUrl = Field(
        ..., example='https://api.github.com/users/octocat/received_events'
    )
    type: str = Field(..., example='User')
    site_admin: bool
    name: str = Field(..., example='monalisa octocat')
    company: str = Field(..., example='GitHub')
    blog: str = Field(..., example='https://github.com/blog')
    location: str = Field(..., example='San Francisco')
    email: EmailStr = Field(..., example='octocat@github.com')
    hireable: bool
    bio: str = Field(..., example='There once was...')
    twitter_username: Optional[str] = Field(None, example='monalisa')
    public_repos: int = Field(..., example=2)
    public_gists: int = Field(..., example=1)
    followers: int = Field(..., example=20)
    following: int = Field(..., example=0)
    created_at: datetime = Field(..., example='2008-01-14T04:33:35Z')
    updated_at: datetime = Field(..., example='2008-01-14T04:33:35Z')
    private_gists: int = Field(..., example=81)
    total_private_repos: int = Field(..., example=100)
    owned_private_repos: int = Field(..., example=100)
    disk_usage: int = Field(..., example=10000)
    collaborators: int = Field(..., example=8)
    two_factor_authentication: bool = Field(..., example=True)
    plan: Optional[Plan2] = None
    suspended_at: Optional[datetime] = None
    business_plus: Optional[bool] = None
    ldap_dn: Optional[str] = None


class CodespacesSecret(BaseModel):
    """
    Secrets for a GitHub Codespace.
    """

    name: str = Field(..., description='The name of the secret.', example='SECRET_NAME')
    created_at: datetime
    updated_at: datetime
    visibility: Visibility = Field(..., description='Visibility of a secret')
    selected_repositories_url: AnyUrl = Field(
        ..., example='https://api.github.com/user/secrets/SECRET_NAME/repositories'
    )


class CodespacesUserPublicKey(BaseModel):
    """
    The public key used for setting user Codespaces' Secrets.
    """

    key_id: str = Field(..., description='The identifier for the key.', example='1234567')
    key: str = Field(
        ...,
        description='The Base64 encoded public key.',
        example='hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs=',
    )


class CodespaceExportDetails(BaseModel):
    """
    An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
    """

    state: Optional[str] = Field(
        None, description='State of the latest export', example='succeeded | failed | in_progress'
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='Completion time of the last export operation',
        example='2021-01-01T19:01:12Z',
    )
    branch: Optional[str] = Field(
        None,
        description='Name of the exported branch',
        example='codespace-monalisa-octocat-hello-world-g4wpq6h95q',
    )
    sha: Optional[str] = Field(
        None,
        description='Git commit SHA of the exported branch',
        example='fd95a81ca01e48ede9f39c799ecbcef817b8a3b2',
    )
    id: Optional[str] = Field(None, description='Id for the export details', example='latest')
    export_url: Optional[str] = Field(
        None,
        description='Url for fetching export details',
        example='https://api.github.com/user/codespaces/:name/exports/latest',
    )


class Email3(BaseModel):
    """
    Email
    """

    email: EmailStr = Field(..., example='octocat@github.com')
    primary: bool = Field(..., example=True)
    verified: bool = Field(..., example=True)
    visibility: str = Field(..., example='public')


class Email4(BaseModel):
    email: Optional[str] = None
    verified: Optional[bool] = None


class Subkey(BaseModel):
    id: Optional[int] = None
    primary_key_id: Optional[int] = None
    key_id: Optional[str] = None
    public_key: Optional[str] = None
    emails: Optional[List] = None
    subkeys: Optional[List] = None
    can_sign: Optional[bool] = None
    can_encrypt_comms: Optional[bool] = None
    can_encrypt_storage: Optional[bool] = None
    can_certify: Optional[bool] = None
    created_at: Optional[str] = None
    expires_at: Optional[str] = None
    raw_key: Optional[str] = None


class GpgKey(BaseModel):
    """
    A unique encryption key
    """

    id: int = Field(..., example=3)
    primary_key_id: int
    key_id: str = Field(..., example='3262EFF25BA0D270')
    public_key: str = Field(..., example='xsBNBFayYZ...')
    emails: List[Email4] = Field(
        ..., example=[{'email': 'mastahyeti@users.noreply.github.com', 'verified': True}]
    )
    subkeys: List[Subkey] = Field(
        ...,
        example=[
            {
                'id': 4,
                'primary_key_id': 3,
                'key_id': '4A595D4C72EE49C7',
                'public_key': 'zsBNBFayYZ...',
                'emails': [],
                'subkeys': [],
                'can_sign': False,
                'can_encrypt_comms': True,
                'can_encrypt_storage': True,
                'can_certify': False,
                'created_at': '2016-03-24T11:31:04-06:00',
                'expires_at': None,
            }
        ],
    )
    can_sign: bool = Field(..., example=True)
    can_encrypt_comms: bool
    can_encrypt_storage: bool
    can_certify: bool = Field(..., example=True)
    created_at: datetime = Field(..., example='2016-03-24T11:31:04-06:00')
    expires_at: datetime
    raw_key: str


class Key(BaseModel):
    """
    Key
    """

    key: str
    id: int
    url: str
    title: str
    created_at: datetime
    verified: bool
    read_only: bool


class MarketplaceAccount(BaseModel):
    url: AnyUrl
    id: int
    type: str
    node_id: Optional[str] = None
    login: str
    email: Optional[EmailStr] = None
    organization_billing_email: Optional[EmailStr] = None


class UserMarketplacePurchase(BaseModel):
    """
    User Marketplace Purchase
    """

    billing_cycle: str = Field(..., example='monthly')
    next_billing_date: datetime = Field(..., example='2017-11-11T00:00:00Z')
    unit_count: int
    on_free_trial: bool = Field(..., example=True)
    free_trial_ends_on: datetime = Field(..., example='2017-11-11T00:00:00Z')
    updated_at: datetime = Field(..., example='2017-11-02T01:12:12Z')
    account: MarketplaceAccount
    plan: MarketplaceListingPlan


class StarredRepository(BaseModel):
    """
    Starred Repository
    """

    starred_at: datetime
    repo: Repository


class Context(BaseModel):
    message: str
    octicon: str


class Hovercard(BaseModel):
    """
    Hovercard
    """

    contexts: List[Context]


class KeySimple(BaseModel):
    """
    Key Simple
    """

    id: int
    key: str
